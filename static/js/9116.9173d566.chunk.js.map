{"version":3,"file":"static/js/9116.9173d566.chunk.js","mappings":"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","sources":["lib/hooks/routing/clientSideSmartOrderRouter.ts","utils/transformSwapRouteToGetQuoteResult.ts"],"sourcesContent":["import { BigintIsh, ChainId, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\n// This file is lazy-loaded, so the import of smart-order-router is intentional.\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { AlphaRouter, AlphaRouterConfig } from '@uniswap/smart-order-router'\nimport { SupportedInterfaceChainId, getChainInfo, isSupportedChainId } from 'constants/chains'\nimport { RPC_PROVIDERS } from 'constants/providers'\nimport { nativeOnChain } from 'constants/tokens'\nimport JSBI from 'jsbi'\nimport { GetQuoteArgs, QuoteResult, QuoteState, SwapRouterNativeAssets } from 'state/routing/types'\nimport { transformSwapRouteToGetQuoteResult } from 'utils/transformSwapRouteToGetQuoteResult'\n\nconst routers = new Map<ChainId, AlphaRouter>()\nexport function getRouter(chainId: ChainId): AlphaRouter {\n  const router = routers.get(chainId)\n  if (router) return router\n\n  if (isSupportedChainId(chainId) && getChainInfo({ chainId }).supportsClientSideRouting) {\n    const provider = RPC_PROVIDERS[chainId as SupportedInterfaceChainId]\n    const router = new AlphaRouter({ chainId, provider })\n    routers.set(chainId, router)\n    return router\n  }\n\n  throw new Error(`Router does not support this chain (chainId: ${chainId}).`)\n}\n\nasync function getQuote(\n  {\n    tradeType,\n    tokenIn,\n    tokenOut,\n    amount: amountRaw,\n  }: {\n    tradeType: TradeType\n    tokenIn: { address: string; chainId: number; decimals: number; symbol?: string }\n    tokenOut: { address: string; chainId: number; decimals: number; symbol?: string }\n    amount: BigintIsh\n  },\n  router: AlphaRouter,\n  routerConfig: Partial<AlphaRouterConfig>\n): Promise<QuoteResult> {\n  const tokenInIsNative = Object.values(SwapRouterNativeAssets).includes(tokenIn.address as SwapRouterNativeAssets)\n  const tokenOutIsNative = Object.values(SwapRouterNativeAssets).includes(tokenOut.address as SwapRouterNativeAssets)\n\n  const currencyIn = tokenInIsNative\n    ? nativeOnChain(tokenIn.chainId)\n    : new Token(tokenIn.chainId, tokenIn.address, tokenIn.decimals, tokenIn.symbol)\n  const currencyOut = tokenOutIsNative\n    ? nativeOnChain(tokenOut.chainId)\n    : new Token(tokenOut.chainId, tokenOut.address, tokenOut.decimals, tokenOut.symbol)\n\n  const baseCurrency = tradeType === TradeType.EXACT_INPUT ? currencyIn : currencyOut\n  const quoteCurrency = tradeType === TradeType.EXACT_INPUT ? currencyOut : currencyIn\n\n  const amount = CurrencyAmount.fromRawAmount(baseCurrency, JSBI.BigInt(amountRaw))\n  // TODO (WEB-2055): explore initializing client side routing on first load (when amountRaw is null) if there are enough users using client-side router preference.\n  const swapRoute = await router.route(amount, quoteCurrency, tradeType, /*swapConfig=*/ undefined, routerConfig)\n\n  if (!swapRoute) {\n    return { state: QuoteState.NOT_FOUND }\n  }\n\n  return transformSwapRouteToGetQuoteResult(tradeType, amount, swapRoute)\n}\n\nexport async function getClientSideQuote(\n  {\n    tokenInAddress,\n    tokenInChainId,\n    tokenInDecimals,\n    tokenInSymbol,\n    tokenOutAddress,\n    tokenOutChainId,\n    tokenOutDecimals,\n    tokenOutSymbol,\n    amount,\n    tradeType,\n  }: GetQuoteArgs,\n  router: AlphaRouter,\n  config: Partial<AlphaRouterConfig>\n) {\n  return getQuote(\n    {\n      tradeType,\n      tokenIn: {\n        address: tokenInAddress,\n        chainId: tokenInChainId,\n        decimals: tokenInDecimals,\n        symbol: tokenInSymbol,\n      },\n      tokenOut: {\n        address: tokenOutAddress,\n        chainId: tokenOutChainId,\n        decimals: tokenOutDecimals,\n        symbol: tokenOutSymbol,\n      },\n      amount,\n    },\n    router,\n    config\n  )\n}\n","import { Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\n// This file is lazy-loaded, so the import of smart-order-router is intentional.\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { routeAmountsToString, SwapRoute } from '@uniswap/smart-order-router'\nimport { Pair as V2Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport {\n  ClassicQuoteData,\n  QuoteResult,\n  QuoteState,\n  URAQuoteType,\n  V2PoolInRoute,\n  V3PoolInRoute,\n} from 'state/routing/types'\n\n// from routing-api (https://github.com/Uniswap/routing-api/blob/main/lib/handlers/quote/quote.ts#L243-L311)\nexport function transformSwapRouteToGetQuoteResult(\n  tradeType: TradeType,\n  amount: CurrencyAmount<Currency>,\n  {\n    quote,\n    quoteGasAdjusted,\n    route,\n    estimatedGasUsed,\n    estimatedGasUsedQuoteToken,\n    estimatedGasUsedUSD,\n    gasPriceWei,\n    methodParameters,\n    blockNumber,\n  }: SwapRoute\n): QuoteResult {\n  const routeResponse: Array<(V3PoolInRoute | V2PoolInRoute)[]> = []\n\n  for (const subRoute of route) {\n    const { amount, quote, tokenPath } = subRoute\n\n    const pools = subRoute.protocol === Protocol.V2 ? subRoute.route.pairs : subRoute.route.pools\n    const curRoute: (V3PoolInRoute | V2PoolInRoute)[] = []\n    for (let i = 0; i < pools.length; i++) {\n      const nextPool = pools[i]\n      const tokenIn = tokenPath[i]\n      const tokenOut = tokenPath[i + 1]\n\n      let edgeAmountIn = undefined\n      if (i === 0) {\n        edgeAmountIn = tradeType === TradeType.EXACT_INPUT ? amount.quotient.toString() : quote.quotient.toString()\n      }\n\n      let edgeAmountOut = undefined\n      if (i === pools.length - 1) {\n        edgeAmountOut = tradeType === TradeType.EXACT_INPUT ? quote.quotient.toString() : amount.quotient.toString()\n      }\n\n      if (nextPool instanceof Pool) {\n        curRoute.push({\n          type: 'v3-pool',\n          tokenIn: {\n            chainId: tokenIn.chainId,\n            decimals: tokenIn.decimals,\n            address: tokenIn.address,\n            symbol: tokenIn.symbol,\n          },\n          tokenOut: {\n            chainId: tokenOut.chainId,\n            decimals: tokenOut.decimals,\n            address: tokenOut.address,\n            symbol: tokenOut.symbol,\n          },\n          fee: nextPool.fee.toString(),\n          liquidity: nextPool.liquidity.toString(),\n          sqrtRatioX96: nextPool.sqrtRatioX96.toString(),\n          tickCurrent: nextPool.tickCurrent.toString(),\n          amountIn: edgeAmountIn,\n          amountOut: edgeAmountOut,\n        })\n      } else {\n        const reserve0 = (nextPool as V2Pair).reserve0\n        const reserve1 = (nextPool as V2Pair).reserve1\n\n        curRoute.push({\n          type: 'v2-pool',\n          tokenIn: {\n            chainId: tokenIn.chainId,\n            decimals: tokenIn.decimals,\n            address: tokenIn.address,\n            symbol: tokenIn.symbol,\n          },\n          tokenOut: {\n            chainId: tokenOut.chainId,\n            decimals: tokenOut.decimals,\n            address: tokenOut.address,\n            symbol: tokenOut.symbol,\n          },\n          reserve0: {\n            token: {\n              chainId: reserve0.currency.wrapped.chainId,\n              decimals: reserve0.currency.wrapped.decimals,\n              address: reserve0.currency.wrapped.address,\n              symbol: reserve0.currency.wrapped.symbol,\n            },\n            quotient: reserve0.quotient.toString(),\n          },\n          reserve1: {\n            token: {\n              chainId: reserve1.currency.wrapped.chainId,\n              decimals: reserve1.currency.wrapped.decimals,\n              address: reserve1.currency.wrapped.address,\n              symbol: reserve1.currency.wrapped.symbol,\n            },\n            quotient: reserve1.quotient.toString(),\n          },\n          amountIn: edgeAmountIn,\n          amountOut: edgeAmountOut,\n        })\n      }\n    }\n\n    routeResponse.push(curRoute)\n  }\n\n  const result: ClassicQuoteData = {\n    methodParameters,\n    blockNumber: blockNumber.toString(),\n    amount: amount.quotient.toString(),\n    amountDecimals: amount.toExact(),\n    quote: quote.quotient.toString(),\n    quoteDecimals: quote.toExact(),\n    quoteGasAdjusted: quoteGasAdjusted.quotient.toString(),\n    quoteGasAdjustedDecimals: quoteGasAdjusted.toExact(),\n    gasUseEstimateQuote: estimatedGasUsedQuoteToken.quotient.toString(),\n    gasUseEstimateQuoteDecimals: estimatedGasUsedQuoteToken.toExact(),\n    gasUseEstimate: estimatedGasUsed.toString(),\n    gasUseEstimateUSD: estimatedGasUsedUSD.toExact(),\n    gasPriceWei: gasPriceWei.toString(),\n    route: routeResponse,\n    routeString: routeAmountsToString(route),\n  }\n\n  return { state: QuoteState.SUCCESS, data: { routing: URAQuoteType.CLASSIC, quote: result, allQuotes: [] } }\n}\n"],"names":["routers","Map","getRouter","chainId","router","get","isSupportedChainId","getChainInfo","supportsClientSideRouting","provider","RPC_PROVIDERS","AlphaRouter","set","Error","getQuote","tradeType","tokenIn","tokenOut","amount","amountRaw","routerConfig","tokenInIsNative","Object","values","SwapRouterNativeAssets","includes","address","tokenOutIsNative","currencyIn","nativeOnChain","Token","decimals","symbol","currencyOut","baseCurrency","TradeType","EXACT_INPUT","quoteCurrency","CurrencyAmount","fromRawAmount","JSBI","swapRoute","route","undefined","quote","quoteGasAdjusted","estimatedGasUsed","estimatedGasUsedQuoteToken","estimatedGasUsedUSD","gasPriceWei","methodParameters","blockNumber","routeResponse","subRoute","tokenPath","pools","protocol","Protocol","V2","pairs","curRoute","i","length","nextPool","edgeAmountIn","edgeAmountOut","quotient","toString","Pool","push","type","fee","liquidity","sqrtRatioX96","tickCurrent","amountIn","amountOut","reserve0","reserve1","token","currency","wrapped","result","amountDecimals","toExact","quoteDecimals","quoteGasAdjustedDecimals","gasUseEstimateQuote","gasUseEstimateQuoteDecimals","gasUseEstimate","gasUseEstimateUSD","routeString","routeAmountsToString","state","QuoteState","SUCCESS","data","routing","URAQuoteType","CLASSIC","allQuotes","transformSwapRouteToGetQuoteResult","NOT_FOUND","getClientSideQuote","config","tokenInAddress","tokenInChainId","tokenInDecimals","tokenInSymbol","tokenOutAddress","tokenOutChainId","tokenOutDecimals","tokenOutSymbol"],"sourceRoot":""}