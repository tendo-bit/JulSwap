{"version":3,"file":"static/js/3464.fc86abec.chunk.js","mappings":"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","sources":["nft/utils/bag.ts","nft/utils/nftRoute.ts","nft/hooks/usePurchaseAssets.ts","nft/hooks/useTokenInput.ts","nft/hooks/useFetchAssets.ts","nft/utils/tokenRoutes.ts","nft/hooks/usePayWithAnyTokenSwap.ts","nft/components/bag/ButtonStates.tsx","nft/components/bag/BagFooter.tsx","graphql/data/nft/NftUniversalRouterAddress.ts","nft/hooks/useSubscribeTransactionState.ts","nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts","nft/hooks/usePriceImpact.ts","nft/components/bag/TimedLoader.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","nft/components/bag/Bag.css.ts","nft/components/modals/Overlay.tsx","nft/components/modals/Overlay.css.ts","nft/hooks/useBagTotalEthPrice.ts"],"sourcesContent":["import { BagItem, BagItemStatus, BagStatus, RoutingItem, UpdatedGenieAsset } from 'nft/types'\n\nimport { compareAssetsWithTransactionRoute } from './txRoute/combineItemsWithTxRoute'\nimport { filterUpdatedAssetsByState } from './updatedAssets'\n\nexport function getPurchasableAssets(itemsInBag: BagItem[]): UpdatedGenieAsset[] {\n  return itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\n}\n\nfunction createBagFromUpdatedAssets(\n  unavailable: UpdatedGenieAsset[],\n  priceChanged: UpdatedGenieAsset[],\n  unchanged: UpdatedGenieAsset[]\n): BagItem[] {\n  return [\n    ...unavailable.map((unavailableAsset) => ({\n      asset: unavailableAsset,\n      status: BagItemStatus.UNAVAILABLE,\n    })),\n    ...priceChanged.map((changedAsset) => ({\n      asset: changedAsset,\n      status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n    })),\n    ...unchanged.map((unchangedAsset) => ({\n      asset: unchangedAsset,\n      status: BagItemStatus.REVIEWED,\n    })),\n  ]\n}\n\nfunction evaluateNextBagState(\n  hasAssets: boolean,\n  shouldReview: boolean,\n  hasAssetsInReview: boolean,\n  shouldRefetchCalldata: boolean\n): BagStatus {\n  if (!hasAssets) {\n    return BagStatus.ADDING_TO_BAG\n  }\n\n  if (shouldReview) {\n    if (hasAssetsInReview) {\n      return BagStatus.IN_REVIEW\n    }\n\n    return BagStatus.CONFIRM_REVIEW\n  }\n\n  if (shouldRefetchCalldata) {\n    return BagStatus.CONFIRM_QUOTE\n  }\n\n  return BagStatus.CONFIRMING_IN_WALLET\n}\n\nexport function getNextBagState(\n  wishAssetsToBuy: UpdatedGenieAsset[],\n  route: RoutingItem[],\n  purchasingWithErc20: boolean\n): { newBagItems: BagItem[]; nextBagStatus: BagStatus } {\n  const { hasPriceAdjustment, updatedAssets } = compareAssetsWithTransactionRoute(wishAssetsToBuy, route)\n  const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20\n\n  const { unchanged, priceChanged, unavailable } = filterUpdatedAssetsByState(updatedAssets)\n\n  const hasAssets = updatedAssets.length > 0\n  const hasAssetsInReview = priceChanged.length > 0\n  const hasUnavailableAssets = unavailable.length > 0\n  const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n  const newBagItems = createBagFromUpdatedAssets(unavailable, priceChanged, unchanged)\n  const nextBagStatus = evaluateNextBagState(hasAssets, shouldReview, hasAssetsInReview, shouldRefetchCalldata)\n\n  return { newBagItems, nextBagStatus }\n}\n","import { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\nimport { NftRouteResponse, NftTrade } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\n\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: '18',\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: '18',\n      },\n      tokenType: routingItem.tokenType as unknown as TokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\n      orderSource: 'api',\n    },\n  }\n}\n\nfunction buildRoutingItems(routingItems: readonly NftTrade[]): RoutingItem[] {\n  return routingItems.map(buildRoutingItem)\n}\n\nexport function buildRouteResponse(\n  routeResponse: NftRouteResponse,\n  useErc20Token: boolean\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress,\n    },\n  }\n}\n","import { RouteResponse, UpdatedGenieAsset } from 'nft/types'\nimport { useCallback } from 'react'\n\nimport { useEthersSigner } from 'hooks/useEthersSigner'\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\nimport { useTransactionResponse } from './useTransactionResponse'\n\nexport function usePurchaseAssets(): (\n  routingData: RouteResponse,\n  assetsToBuy: UpdatedGenieAsset[],\n  purchasingWithErc20?: boolean\n) => Promise<void> {\n  const signer = useEthersSigner()\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\n  const setTransactionResponse = useTransactionResponse((state) => state.setTransactionResponse)\n\n  const {\n    setLocked: setBagLocked,\n    setBagExpanded,\n    reset: resetBag,\n  } = useBag(({ setLocked, setBagExpanded, reset }) => ({\n    setLocked,\n    setBagExpanded,\n    reset,\n  }))\n\n  return useCallback(\n    async (routingData: RouteResponse, assetsToBuy: UpdatedGenieAsset[], purchasingWithErc20 = false) => {\n      if (!signer) return\n\n      const purchaseResponse = await sendTransaction(signer, assetsToBuy, routingData, purchasingWithErc20)\n\n      if (purchaseResponse) {\n        setBagLocked(false)\n        setTransactionResponse(purchaseResponse)\n        setBagExpanded({ bagExpanded: false })\n        resetBag()\n      }\n    },\n    [signer, resetBag, sendTransaction, setBagExpanded, setBagLocked, setTransactionResponse]\n  )\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { TokenTradeInput } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\nimport { devtools } from 'zustand/middleware'\nimport { shallow } from 'zustand/shallow'\nimport { createWithEqualityFn } from 'zustand/traditional'\n\ninterface TokenInputState {\n  inputCurrency?: Currency\n  setInputCurrency: (currency: Currency | undefined) => void\n  clearInputCurrency: () => void\n  tokenTradeInput?: TokenTradeInput\n  setTokenTradeInput: (tokenTradeInput: TokenTradeInput | undefined) => void\n}\n\nexport const useTokenInput = createWithEqualityFn<TokenInputState>()(\n  devtools(\n    (set) => ({\n      inputCurrency: undefined,\n      tokenTradeInput: undefined,\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\n      clearInputCurrency: () => set(() => ({ inputCurrency: undefined })),\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput })),\n    }),\n    { name: 'useTokenInput' }\n  ),\n  shallow\n)\n","import { useWeb3React } from '@web3-react/core'\nimport { BagStatus } from 'nft/types'\nimport { buildNftTradeInputFromBagItems, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { getNextBagState, getPurchasableAssets } from 'nft/utils/bag'\nimport { buildRouteResponse } from 'nft/utils/nftRoute'\nimport { useCallback, useMemo } from 'react'\nimport { useNftRouteLazyQuery } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\n\nimport { useBag } from './useBag'\nimport { usePurchaseAssets } from './usePurchaseAssets'\nimport { useTokenInput } from './useTokenInput'\n\nexport function useFetchAssets(): () => Promise<void> {\n  const { account } = useWeb3React()\n\n  const {\n    itemsInBag: uncheckedItemsInBag,\n    setBagStatus,\n    didOpenUnavailableAssets,\n    setDidOpenUnavailableAssets,\n    isLocked: bagIsLocked,\n    setLocked: setBagLocked,\n    setItemsInBag,\n  } = useBag(\n    ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    }) => ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    })\n  )\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput)\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\n  const purchaseAssets = usePurchaseAssets()\n\n  const resetStateBeforeFetch = useCallback(() => {\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\n    !bagIsLocked && setBagLocked(true)\n    setBagStatus(BagStatus.FETCHING_ROUTE)\n  }, [bagIsLocked, didOpenUnavailableAssets, setBagLocked, setBagStatus, setDidOpenUnavailableAssets])\n\n  return useCallback(async () => {\n    resetStateBeforeFetch()\n\n    fetchGqlRoute({\n      variables: {\n        senderAddress: account ? account : '',\n        nftTrades: buildNftTradeInputFromBagItems(itemsInBag),\n        tokenTrades: tokenTradeInput ? tokenTradeInput : undefined,\n      },\n      onCompleted: (data) => {\n        if (!data.nftRoute || !data.nftRoute.route) {\n          setBagStatus(BagStatus.ADDING_TO_BAG)\n          setBagLocked(false)\n          return\n        }\n\n        const wishAssetsToBuy = getPurchasableAssets(itemsInBag)\n        const purchasingWithErc20 = !!tokenTradeInput\n        const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20)\n\n        const { newBagItems, nextBagStatus } = getNextBagState(wishAssetsToBuy, route, purchasingWithErc20)\n\n        setItemsInBag(newBagItems)\n        setBagStatus(nextBagStatus)\n\n        if (nextBagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n          purchaseAssets(routeResponse, wishAssetsToBuy, purchasingWithErc20)\n          setBagLocked(true)\n          return\n        }\n\n        setBagLocked(false)\n      },\n    })\n  }, [\n    account,\n    fetchGqlRoute,\n    itemsInBag,\n    purchaseAssets,\n    resetStateBeforeFetch,\n    setBagLocked,\n    setBagStatus,\n    setItemsInBag,\n    tokenTradeInput,\n  ])\n}\n","import { IRoute, Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { ClassicTrade } from 'state/routing/types'\nimport {\n  TokenAmountInput,\n  TokenTradeRouteInput,\n  TradePoolInput,\n} from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\n\ninterface SwapAmounts {\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\ninterface TradeTokenInputAmounts {\n  inputAmount: TokenAmountInput\n  outputAmount: TokenAmountInput\n}\n\ninterface Swap {\n  route: IRoute<Currency, Currency, Pair | Pool>\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nfunction buildTradeRouteInputAmounts(swapAmounts: SwapAmounts): TradeTokenInputAmounts {\n  return {\n    inputAmount: {\n      amount: swapAmounts.inputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.inputAmount.currency.isToken\n          ? swapAmounts.inputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.inputAmount.currency.chainId,\n        decimals: swapAmounts.inputAmount.currency.decimals,\n        isNative: swapAmounts.inputAmount.currency.isNative,\n      },\n    },\n    outputAmount: {\n      amount: swapAmounts.outputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.outputAmount.currency.isToken\n          ? swapAmounts.outputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.outputAmount.currency.chainId,\n        decimals: swapAmounts.outputAmount.currency.decimals,\n        isNative: swapAmounts.outputAmount.currency.isNative,\n      },\n    },\n  }\n}\n\nfunction buildPool(pool: Pair | Pool): TradePoolInput {\n  const isPool = 'fee' in pool\n\n  return {\n    pair: !isPool\n      ? {\n          tokenAmountA: {\n            amount: pool.reserve0.quotient.toString(),\n            token: {\n              address: pool.token0.address,\n              chainId: pool.token0.chainId,\n              decimals: pool.token0.decimals,\n              isNative: pool.token0.isNative,\n            },\n          },\n          tokenAmountB: {\n            amount: pool.reserve1.quotient.toString(),\n            token: {\n              address: pool.token1.address,\n              chainId: pool.token1.chainId,\n              decimals: pool.token1.decimals,\n              isNative: pool.token1.isNative,\n            },\n          },\n        }\n      : undefined,\n    pool: isPool\n      ? {\n          fee: pool.fee,\n          liquidity: pool.liquidity.toString(),\n          sqrtRatioX96: pool.sqrtRatioX96.toString(),\n          tickCurrent: pool.tickCurrent.toString(),\n          tokenA: {\n            address: pool.token0.address,\n            chainId: pool.token0.chainId,\n            decimals: pool.token0.decimals,\n            isNative: pool.token0.isNative,\n          },\n          tokenB: {\n            address: pool.token1.address,\n            chainId: pool.token1.chainId,\n            decimals: pool.token1.decimals,\n            isNative: pool.token1.isNative,\n          },\n        }\n      : undefined,\n  }\n}\n\nfunction buildPools(pools: (Pair | Pool)[]): TradePoolInput[] {\n  return pools.map((pool) => buildPool(pool))\n}\n\nfunction buildTradeRouteInput(swap: Swap): TokenTradeRouteInput {\n  return {\n    ...buildTradeRouteInputAmounts({ inputAmount: swap.inputAmount, outputAmount: swap.outputAmount }),\n    pools: buildPools(swap.route.pools),\n  }\n}\n\nexport function buildAllTradeRouteInputs(trade: ClassicTrade): {\n  mixedTokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v2TokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v3TokenTradeRouteInputs?: TokenTradeRouteInput[]\n} {\n  const mixedTokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v2TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v3TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n\n  const swaps = trade.swaps\n\n  for (const swap of swaps) {\n    if (swap.route.protocol === Protocol.MIXED) {\n      mixedTokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else if (swap.route.protocol === Protocol.V2) {\n      v2TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else {\n      v3TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    }\n  }\n\n  return {\n    mixedTokenTradeRouteInputs: mixedTokenTradeRouteInputs.length > 0 ? mixedTokenTradeRouteInputs : undefined,\n    v2TokenTradeRouteInputs: v2TokenTradeRouteInputs.length > 0 ? v2TokenTradeRouteInputs : undefined,\n    v3TokenTradeRouteInputs: v3TokenTradeRouteInputs.length > 0 ? v3TokenTradeRouteInputs : undefined,\n  }\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { Allowance } from 'hooks/usePermit2Allowance'\nimport { buildAllTradeRouteInputs } from 'nft/utils/tokenRoutes'\nimport { useEffect } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { isClassicTrade } from 'state/routing/utils'\nimport {\n  PermitInput,\n  TokenTradeRoutesInput,\n  TokenTradeType,\n} from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\n\nimport { useTokenInput } from './useTokenInput'\n\nexport default function usePayWithAnyTokenSwap(\n  trade?: InterfaceTrade | undefined,\n  allowance?: Allowance,\n  allowedSlippage?: Percent\n) {\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput)\n  const hasRoutes = isClassicTrade(trade) && trade.routes\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken\n  const hasAllowance = !!allowedSlippage && !!allowance\n\n  useEffect(() => {\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\n      setTokenTradeInput(undefined)\n      return\n    }\n\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2))\n\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } =\n      buildAllTradeRouteInputs(trade)\n\n    const routes: TokenTradeRoutesInput = {\n      mixedRoutes: mixedTokenTradeRouteInputs,\n      tradeType: TokenTradeType.ExactOutput,\n      v2Routes: v2TokenTradeRouteInputs,\n      v3Routes: v3TokenTradeRouteInputs,\n    }\n\n    const permitInput: PermitInput | undefined =\n      'permitSignature' in allowance && allowance.permitSignature\n        ? {\n            details: {\n              amount: allowance.permitSignature.details.amount.toString(),\n              expiration: allowance.permitSignature.details.expiration.toString(),\n              nonce: allowance.permitSignature.details.nonce.toString(),\n              token: allowance.permitSignature.details.token,\n            },\n            sigDeadline: allowance.permitSignature.sigDeadline.toString(),\n            signature: allowance.permitSignature.signature,\n            spender: allowance.permitSignature.spender,\n          }\n        : undefined\n\n    setTokenTradeInput({\n      permit: permitInput,\n      routes,\n      slippageToleranceBasisPoints: slippage,\n      tokenAmount: {\n        amount: trade.inputAmount.quotient.toString(),\n        token: {\n          address: trade.inputAmount.currency.address,\n          chainId: trade.inputAmount.currency.chainId,\n          decimals: trade.inputAmount.currency.decimals,\n          isNative: trade.inputAmount.currency.isNative,\n        },\n      },\n    })\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade])\n}\n","import { Trans } from 'i18n'\nimport { PriceImpact } from 'nft/hooks/usePriceImpact'\nimport { ReactNode } from 'react'\nimport { DefaultTheme } from 'styled-components'\n\nexport enum BuyButtonStates {\n  WALLET_NOT_CONNECTED,\n  NOT_SUPPORTED_CHAIN,\n  INSUFFICIENT_BALANCE,\n  ERROR,\n  IN_WALLET_CONFIRMATION,\n  PROCESSING_TRANSACTION,\n  FETCHING_TOKEN_ROUTE,\n  INVALID_TOKEN_ROUTE,\n  NO_TOKEN_ROUTE_FOUND,\n  LOADING_ALLOWANCE,\n  IN_WALLET_ALLOWANCE_APPROVAL,\n  PROCESSING_APPROVAL,\n  REQUIRE_APPROVAL,\n  CONFIRM_UPDATED_PRICE,\n  PRICE_IMPACT_HIGH,\n  PAY,\n}\n\nexport interface BuyButtonStateData {\n  handleClick: (() => void) | (() => Promise<void>)\n  buttonText: ReactNode\n  disabled: boolean\n  warningText?: ReactNode\n  warningTextColor: string\n  helperText?: ReactNode\n  helperTextColor: string\n  buttonColor: string\n  buttonTextColor: string\n}\n\nexport function getBuyButtonStateData(\n  buyButtonState: BuyButtonStates,\n  theme: DefaultTheme,\n  handleClickOverride?: (() => void) | (() => Promise<void>),\n  usingPayWithAnyToken?: boolean,\n  priceImpact?: PriceImpact\n): BuyButtonStateData {\n  const defaultBuyButtonState: BuyButtonStateData = {\n    handleClick: () => undefined,\n    buttonText: <Trans>Something went wrong</Trans>,\n    disabled: true,\n    warningText: undefined,\n    warningTextColor: theme.deprecated_accentWarning,\n    helperText: undefined,\n    helperTextColor: theme.neutral2,\n    buttonColor: theme.accent1,\n    buttonTextColor: theme.deprecated_accentTextLightPrimary,\n  }\n\n  const buyButtonStateData: Record<BuyButtonStates, BuyButtonStateData> = {\n    [BuyButtonStates.WALLET_NOT_CONNECTED]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Connect wallet</Trans>,\n    },\n    [BuyButtonStates.NOT_SUPPORTED_CHAIN]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      buttonText: <Trans>Switch networks</Trans>,\n      disabled: false,\n      warningText: <Trans>Wrong network</Trans>,\n    },\n    [BuyButtonStates.INSUFFICIENT_BALANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n      warningText: <Trans>Insufficient funds</Trans>,\n    },\n    [BuyButtonStates.ERROR]: {\n      ...defaultBuyButtonState,\n      warningText: <Trans>Something went wrong. Please try again.</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_CONFIRMATION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Proceed in wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_TRANSACTION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Transaction pending</Trans>,\n    },\n    [BuyButtonStates.FETCHING_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Fetching route</Trans>,\n    },\n    [BuyButtonStates.INVALID_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.NO_TOKEN_ROUTE_FOUND]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Insufficient liquidity</Trans>,\n      buttonColor: theme.surface3,\n      buttonTextColor: theme.neutral1,\n      helperText: <Trans>Insufficient pool liquidity to complete transaction</Trans>,\n    },\n    [BuyButtonStates.LOADING_ALLOWANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Loading allowance</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approve in your wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approval pending</Trans>,\n    },\n    [BuyButtonStates.REQUIRE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      disabled: false,\n      handleClick: handleClickOverride ?? (() => undefined),\n      helperText: <Trans>An approval is needed to use this token. </Trans>,\n      buttonText: <Trans>Approve</Trans>,\n    },\n    [BuyButtonStates.CONFIRM_UPDATED_PRICE]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      warningTextColor: theme.accent1,\n      warningText: <Trans>Price updated</Trans>,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.PRICE_IMPACT_HIGH]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.buttonColor,\n      helperText: <Trans>Price impact warning</Trans>,\n      helperTextColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.helperTextColor,\n      buttonText: <Trans>Pay Anyway</Trans>,\n    },\n    [BuyButtonStates.PAY]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Pay</Trans>,\n      helperText: usingPayWithAnyToken ? <Trans>Refunds for unavailable items will be given in ETH</Trans> : undefined,\n    },\n  }\n\n  return buyButtonStateData[buyButtonState]\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther, parseEther } from '@ethersproject/units'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { ChainId, Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { TraceEvent, sendAnalyticsEvent } from 'analytics'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer/MiniPortfolio/hooks'\nimport Column from 'components/Column'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport Row from 'components/Row'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { useIsSupportedChainId } from 'constants/chains'\nimport { getURAddress, useNftUniversalRouterAddress } from 'graphql/data/nft/NftUniversalRouterAddress'\nimport { useCurrency } from 'hooks/Tokens'\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport { useSwitchChain } from 'hooks/useSwitchChain'\nimport { Trans, t } from 'i18n'\nimport { useTokenBalance } from 'lib/hooks/useCurrencyBalance'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { useBag } from 'nft/hooks/useBag'\nimport { useBagTotalEthPrice } from 'nft/hooks/useBagTotalEthPrice'\nimport useDerivedPayWithAnyTokenSwapInfo from 'nft/hooks/useDerivedPayWithAnyTokenSwapInfo'\nimport { useFetchAssets } from 'nft/hooks/useFetchAssets'\nimport usePayWithAnyTokenSwap from 'nft/hooks/usePayWithAnyTokenSwap'\nimport { PriceImpact, usePriceImpact } from 'nft/hooks/usePriceImpact'\nimport { useSubscribeTransactionState } from 'nft/hooks/useSubscribeTransactionState'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\nimport { BagStatus } from 'nft/types'\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle, ChevronDown } from 'react-feather'\nimport { InterfaceTrade, TradeFillType, TradeState } from 'state/routing/types'\nimport styled, { useTheme } from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nimport { CurrencySearchFilters } from 'components/SearchModal/CurrencySearch'\nimport { BuyButtonStateData, BuyButtonStates, getBuyButtonStateData } from './ButtonStates'\n\nconst FooterContainer = styled.div`\n  padding: 0px 12px;\n`\n\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.surface3};\n  color: ${({ theme }) => theme.neutral1};\n  display: flex;\n  flex-direction: column;\n  margin: 0px 16px 8px;\n  padding: 12px 0px;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`\n\nconst FooterHeader = styled(Column)`\n  padding-top: 8px;\n  padding-bottom: 16px;\n`\n\nconst CurrencyRow = styled(Row)`\n  justify-content: space-between;\n  align-items: start;\n  gap: 8px;\n`\n\nconst TotalColumn = styled(Column)`\n  text-align: end;\n  overflow: hidden;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 14px;\n  margin-right: 4px;\n  color: inherit;\n`\nconst WarningText = styled(ThemedText.BodyPrimary)<{ $color: string }>`\n  align-items: center;\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px !important;\n  text-align: center;\n`\n\nconst HelperText = styled(ThemedText.BodySmall)<{ $color: string }>`\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  margin-bottom: 10px !important;\n`\n\nconst CurrencyInput = styled(Row)`\n  gap: 8px;\n  cursor: pointer;\n`\n\nconst ActionButton = styled.button<{ $backgroundColor: string; $color: string }>`\n  display: flex;\n  background: ${({ $backgroundColor }) => $backgroundColor};\n  color: ${({ $color }) => $color};\n  font-weight: 535;\n  line-height: 24px;\n  font-size: 16px;\n  gap: 16px;\n  justify-content: center;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 0px;\n  cursor: pointer;\n  align-items: center;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: auto;\n  }\n`\nconst FiatLoadingBubble = styled(LoadingBubble)`\n  border-radius: 4px;\n  width: 4rem;\n  height: 20px;\n  align-self: end;\n`\nconst PriceImpactContainer = styled(Row)`\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst PriceImpactRow = styled(Row)`\n  align-items: center;\n  gap: 8px;\n`\n\nconst ValueText = styled(ThemedText.BodyPrimary)`\n  line-height: 20px;\n  font-weight: 535;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\ninterface HelperTextProps {\n  color: string\n}\n\nconst Warning = ({ color, children }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <WarningText data-testid=\"nft-buy-button-warning\" fontSize=\"14px\" lineHeight=\"20px\" $color={color}>\n      <WarningIcon />\n      {children}\n    </WarningText>\n  )\n}\n\nconst Helper = ({ children, color }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <HelperText lineHeight=\"16px\" $color={color}>\n      {children}\n    </HelperText>\n  )\n}\n\nconst BAG_FOOTER_CURRENCY_SEARCH_FILTERS: CurrencySearchFilters = {\n  onlyShowCurrenciesWithBalance: true,\n}\n\nconst InputCurrencyValue = ({\n  usingPayWithAnyToken,\n  totalEthPrice,\n  activeCurrency,\n  tradeState,\n  trade,\n}: {\n  usingPayWithAnyToken: boolean\n  totalEthPrice: BigNumber\n  activeCurrency?: Currency | null\n  tradeState: TradeState\n  trade?: InterfaceTrade\n}) => {\n  const { formatEther, formatNumberOrString } = useFormatter()\n\n  if (!usingPayWithAnyToken) {\n    return (\n      <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"535\">\n        {formatEther({ input: totalEthPrice.toString(), type: NumberType.NFTToken })}\n        &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  if (tradeState === TradeState.LOADING && !trade) {\n    return (\n      <ThemedText.BodyPrimary color=\"neutral3\" lineHeight=\"20px\" fontWeight=\"535\">\n        <Trans>Fetching price...</Trans>\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  return (\n    <ValueText color={tradeState === TradeState.LOADING ? 'neutral3' : 'neutral1'}>\n      {formatNumberOrString({ input: trade?.inputAmount.toExact(), type: NumberType.NFTToken })}\n    </ValueText>\n  )\n}\n\nconst FiatValue = ({\n  usdcValue,\n  priceImpact,\n  tradeState,\n  usingPayWithAnyToken,\n}: {\n  usdcValue: CurrencyAmount<Token> | null\n  priceImpact?: PriceImpact\n  tradeState: TradeState\n  usingPayWithAnyToken: boolean\n}) => {\n  const { formatNumberOrString } = useFormatter()\n\n  if (!usdcValue) {\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\n      return null\n    }\n\n    return <FiatLoadingBubble />\n  }\n\n  return (\n    <PriceImpactContainer>\n      {priceImpact && (\n        <>\n          <MouseoverTooltip text={t`The estimated difference between the USD values of input and output amounts.`}>\n            <PriceImpactRow>\n              <AlertTriangle color={priceImpact.priceImpactSeverity.color} size=\"16px\" />\n              <ThemedText.BodySmall style={{ color: priceImpact.priceImpactSeverity.color }} lineHeight=\"20px\">\n                ({priceImpact.displayPercentage()})\n              </ThemedText.BodySmall>\n            </PriceImpactRow>\n          </MouseoverTooltip>\n        </>\n      )}\n      <ThemedText.BodySmall color=\"neutral3\" lineHeight=\"20px\">\n        {`${formatNumberOrString({ input: usdcValue?.toExact(), type: NumberType.FiatNFTToken })}`}\n      </ThemedText.BodySmall>\n    </PriceImpactContainer>\n  )\n}\n\nconst PENDING_BAG_STATUSES = [\n  BagStatus.FETCHING_ROUTE,\n  BagStatus.CONFIRMING_IN_WALLET,\n  BagStatus.FETCHING_FINAL_ROUTE,\n  BagStatus.PROCESSING_TRANSACTION,\n]\n\ninterface BagFooterProps {\n  setModalIsOpen: (open: boolean) => void\n  eventProperties: Record<string, unknown>\n}\n\nexport const BagFooter = ({ setModalIsOpen, eventProperties }: BagFooterProps) => {\n  const toggleWalletDrawer = useToggleAccountDrawer()\n  const theme = useTheme()\n  const { account, chainId } = useWeb3React()\n  const isSupportedChain = useIsSupportedChainId(chainId)\n  const connected = Boolean(account && chainId)\n  const totalEthPrice = useBagTotalEthPrice()\n  const { inputCurrency } = useTokenInput(({ inputCurrency }) => ({ inputCurrency }))\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency)\n  const defaultCurrency = useCurrency('ETH')\n  const inputCurrencyBalance = useTokenBalance(\n    account ?? undefined,\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : undefined\n  )\n  const {\n    isLocked: bagIsLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  } = useBag(({ isLocked, bagStatus, setBagExpanded, setBagStatus }) => ({\n    isLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  }))\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false)\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\n  const activeCurrency = inputCurrency ?? defaultCurrency\n  const usingPayWithAnyToken = !!inputCurrency && chainId === ChainId.MAINNET\n  const { universalRouterAddress, universalRouterAddressIsLoading } = useNftUniversalRouterAddress()\n\n  useSubscribeTransactionState(setModalIsOpen)\n  const fetchAssets = useFetchAssets()\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n  const {\n    state: tradeState,\n    trade,\n    maximumAmountIn,\n    allowedSlippage,\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : undefined, parsedOutputAmount)\n  const allowance = usePermit2Allowance(\n    maximumAmountIn,\n    getURAddress(isSupportedChain ? chainId : undefined, universalRouterAddress),\n    TradeFillType.Classic\n  )\n  const loadingAllowance = allowance.state === AllowanceState.LOADING || universalRouterAddressIsLoading\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage)\n  const priceImpact = usePriceImpact(trade)\n\n  const fiatValueTradeInput = useStablecoinValue(trade?.inputAmount)\n  const fiatValueTradeOutput = useStablecoinValue(parsedOutputAmount)\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput\n\n  const { balance: balanceInEth } = useWalletBalance()\n  const sufficientBalance = useMemo(() => {\n    if (!connected || chainId !== ChainId.MAINNET) {\n      return undefined\n    }\n\n    if (inputCurrency) {\n      const inputAmount = trade?.inputAmount\n\n      if (!inputCurrencyBalance || !inputAmount) {\n        return undefined\n      }\n\n      return !inputCurrencyBalance.lessThan(inputAmount)\n    }\n\n    return parseEther(balanceInEth).gte(totalEthPrice)\n  }, [connected, chainId, inputCurrency, balanceInEth, totalEthPrice, trade?.inputAmount, inputCurrencyBalance])\n\n  useEffect(() => {\n    setBagStatus(BagStatus.ADDING_TO_BAG)\n  }, [inputCurrency, setBagStatus])\n\n  const switchChain = useSwitchChain()\n  const {\n    buttonText,\n    buttonTextColor,\n    disabled,\n    warningText,\n    warningTextColor,\n    helperText,\n    helperTextColor,\n    handleClick,\n    buttonColor,\n  } = useMemo((): BuyButtonStateData => {\n    if (connected && chainId !== ChainId.MAINNET) {\n      const handleClick = () => switchChain(ChainId.MAINNET)\n      return getBuyButtonStateData(BuyButtonStates.NOT_SUPPORTED_CHAIN, theme, handleClick)\n    }\n\n    if (sufficientBalance === false) {\n      return getBuyButtonStateData(BuyButtonStates.INSUFFICIENT_BALANCE, theme)\n    }\n\n    if (bagStatus === BagStatus.WARNING) {\n      return getBuyButtonStateData(BuyButtonStates.ERROR, theme)\n    }\n\n    if (!connected) {\n      const handleClick = () => {\n        toggleWalletDrawer()\n        setBagExpanded({ bagExpanded: false })\n      }\n      return getBuyButtonStateData(BuyButtonStates.WALLET_NOT_CONNECTED, theme, handleClick)\n    }\n\n    if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n      return getBuyButtonStateData(BuyButtonStates.IN_WALLET_CONFIRMATION, theme)\n    }\n\n    if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\n      return getBuyButtonStateData(BuyButtonStates.PROCESSING_TRANSACTION, theme)\n    }\n\n    if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\n      if (tradeState === TradeState.INVALID) {\n        return getBuyButtonStateData(BuyButtonStates.INVALID_TOKEN_ROUTE, theme)\n      }\n\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\n        return getBuyButtonStateData(BuyButtonStates.NO_TOKEN_ROUTE_FOUND, theme)\n      }\n\n      return getBuyButtonStateData(BuyButtonStates.FETCHING_TOKEN_ROUTE, theme)\n    }\n\n    const allowanceRequired = allowance.state === AllowanceState.REQUIRED\n    const handleClick = () => allowanceRequired && allowance.approveAndPermit()\n\n    if (loadingAllowance) {\n      return getBuyButtonStateData(BuyButtonStates.LOADING_ALLOWANCE, theme, handleClick)\n    }\n\n    if (allowanceRequired) {\n      if (allowance.isApprovalPending) {\n        return getBuyButtonStateData(BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL, theme, handleClick)\n      } else if (allowance.isApprovalLoading) {\n        return getBuyButtonStateData(BuyButtonStates.PROCESSING_APPROVAL, theme, handleClick)\n      } else {\n        return getBuyButtonStateData(BuyButtonStates.REQUIRE_APPROVAL, theme, handleClick)\n      }\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_QUOTE) {\n      return getBuyButtonStateData(BuyButtonStates.CONFIRM_UPDATED_PRICE, theme, fetchAssets)\n    }\n\n    if (priceImpact && priceImpact.priceImpactSeverity.type === 'error') {\n      return getBuyButtonStateData(\n        BuyButtonStates.PRICE_IMPACT_HIGH,\n        theme,\n        fetchAssets,\n        usingPayWithAnyToken,\n        priceImpact\n      )\n    }\n\n    return getBuyButtonStateData(BuyButtonStates.PAY, theme, fetchAssets, usingPayWithAnyToken)\n  }, [\n    connected,\n    chainId,\n    sufficientBalance,\n    bagStatus,\n    usingPayWithAnyToken,\n    tradeState,\n    loadingAllowance,\n    allowance,\n    priceImpact,\n    theme,\n    fetchAssets,\n    switchChain,\n    toggleWalletDrawer,\n    setBagExpanded,\n  ])\n\n  const traceEventProperties = {\n    usd_value: usdcValue?.toExact(),\n    using_erc20: !!inputCurrency,\n    ...eventProperties,\n  }\n\n  return (\n    <FooterContainer>\n      <Footer>\n        <FooterHeader gap=\"xs\">\n          <CurrencyRow>\n            <Column gap=\"xs\">\n              {isSupportedChain && (\n                <>\n                  <ThemedText.SubHeaderSmall>\n                    <Trans>Pay with</Trans>\n                  </ThemedText.SubHeaderSmall>\n                  <CurrencyInput\n                    onClick={() => {\n                      if (!bagIsLocked) {\n                        setTokenSelectorOpen(true)\n                        sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED)\n                      }\n                    }}\n                  >\n                    <CurrencyLogo currency={activeCurrency} size={24} />\n                    <ThemedText.HeadlineSmall fontWeight={535} lineHeight=\"24px\">\n                      {activeCurrency?.symbol}\n                    </ThemedText.HeadlineSmall>\n                    <ChevronDown size={20} color={theme.neutral2} />\n                  </CurrencyInput>\n                </>\n              )}\n            </Column>\n            <TotalColumn gap=\"xs\">\n              <ThemedText.SubHeaderSmall>\n                <Trans>Total</Trans>\n              </ThemedText.SubHeaderSmall>\n              <InputCurrencyValue\n                usingPayWithAnyToken={usingPayWithAnyToken}\n                totalEthPrice={totalEthPrice}\n                activeCurrency={activeCurrency}\n                tradeState={tradeState}\n                trade={trade}\n              />\n            </TotalColumn>\n          </CurrencyRow>\n          <FiatValue\n            usdcValue={usdcValue}\n            priceImpact={priceImpact}\n            tradeState={tradeState}\n            usingPayWithAnyToken={usingPayWithAnyToken}\n          />\n        </FooterHeader>\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          name={NFTEventName.NFT_BUY_BAG_PAY}\n          element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\n          properties={{ ...traceEventProperties }}\n          shouldLogImpression={connected && !disabled}\n        >\n          <Warning color={warningTextColor}>{warningText}</Warning>\n          <Helper color={helperTextColor}>{helperText}</Helper>\n          <ActionButton\n            data-testid=\"nft-buy-button\"\n            onClick={handleClick}\n            disabled={disabled || isPending}\n            $backgroundColor={buttonColor}\n            $color={buttonTextColor}\n          >\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\n            {buttonText}\n          </ActionButton>\n        </TraceEvent>\n      </Footer>\n      <CurrencySearchModal\n        isOpen={tokenSelectorOpen}\n        onDismiss={() => setTokenSelectorOpen(false)}\n        onCurrencySelect={(currency: Currency) => {\n          setInputCurrency(currency.isNative ? undefined : currency)\n          if (currency.isToken) {\n            sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\n              token_address: currency.address,\n              token_symbol: currency.symbol,\n            })\n          }\n        }}\n        selectedCurrency={activeCurrency ?? undefined}\n        currencySearchFilters={BAG_FOOTER_CURRENCY_SEARCH_FILTERS}\n      />\n    </FooterContainer>\n  )\n}\n","import { ChainId } from '@uniswap/sdk-core'\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { SupportedInterfaceChainId } from 'constants/chains'\nimport { useNftUniversalRouterAddressQuery } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\n\nexport function getURAddress(chainId?: SupportedInterfaceChainId, nftURAddress?: string): string | undefined {\n  if (!chainId) return undefined\n  // if mainnet and on NFT flow, use the contract address returned by GQL\n  if (chainId === ChainId.MAINNET) {\n    return nftURAddress ?? UNIVERSAL_ROUTER_ADDRESS(chainId)\n  }\n  return UNIVERSAL_ROUTER_ADDRESS(chainId)\n}\n\nexport function useNftUniversalRouterAddress() {\n  const { data, loading } = useNftUniversalRouterAddressQuery({\n    // no cache because a different version of nftRoute query is going to be called around the same time\n    fetchPolicy: 'no-cache',\n  })\n\n  return {\n    universalRouterAddress: data?.nftRoute?.toAddress,\n    universalRouterAddressIsLoading: loading,\n  }\n}\n","import { BagStatus, TxStateType } from 'nft/types'\nimport { useEffect, useRef } from 'react'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\n\nexport function useSubscribeTransactionState(setModalIsOpen: (isOpen: boolean) => void) {\n  const transactionState = useSendTransaction((state) => state.state)\n  const setTransactionState = useSendTransaction((state) => state.setState)\n  const transactionStateRef = useRef(transactionState)\n  const { setBagStatus, setLocked: setBagLocked } = useBag(({ setBagExpanded, setBagStatus, setLocked }) => ({\n    setBagExpanded,\n    setBagStatus,\n    setLocked,\n  }))\n\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\n  }, [])\n\n  useEffect(() => {\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\n      if (transactionStateRef.current === TxStateType.Invalid) {\n        setBagStatus(BagStatus.WARNING)\n      } else setBagStatus(BagStatus.CONFIRM_REVIEW)\n      setTransactionState(TxStateType.New)\n\n      setBagLocked(false)\n      setModalIsOpen(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setBagLocked, setBagStatus, setModalIsOpen, setTransactionState, transactionStateRef.current])\n}\n","import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useDebouncedTrade } from 'hooks/useDebouncedTrade'\nimport { useMemo } from 'react'\nimport { ClassicTrade, RouterPreference, TradeState } from 'state/routing/types'\nimport { isClassicTrade } from 'state/routing/utils'\n\nexport default function useDerivedPayWithAnyTokenSwapInfo(\n  inputCurrency?: Currency,\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\n): {\n  state: TradeState\n  trade?: ClassicTrade\n  maximumAmountIn?: CurrencyAmount<Token>\n  allowedSlippage: Percent\n} {\n  const { state, trade } = useDebouncedTrade(\n    TradeType.EXACT_OUTPUT,\n    parsedOutputAmount,\n    inputCurrency ?? undefined,\n    RouterPreference.API\n  )\n\n  const allowedSlippage = useAutoSlippageTolerance(isClassicTrade(trade) ? trade : undefined)\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\n  }, [allowedSlippage, trade])\n\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage,\n    }\n  }, [allowedSlippage, maximumAmountIn, state, trade])\n}\n","import { useMemo } from 'react'\nimport { ClassicTrade } from 'state/routing/types'\nimport { useTheme } from 'styled-components'\nimport { useFormatter } from 'utils/formatNumbers'\nimport { computeRealizedPriceImpact, getPriceImpactWarning } from 'utils/prices'\n\nexport interface PriceImpact {\n  priceImpactSeverity: PriceImpactSeverity\n  displayPercentage(): string\n}\n\ninterface PriceImpactSeverity {\n  type: 'warning' | 'error'\n  color: string\n}\n\nexport function usePriceImpact(trade?: ClassicTrade): PriceImpact | undefined {\n  const theme = useTheme()\n  const { formatPercent } = useFormatter()\n\n  return useMemo(() => {\n    const marketPriceImpact = trade ? computeRealizedPriceImpact(trade) : undefined\n    const priceImpactWarning = marketPriceImpact ? getPriceImpactWarning(marketPriceImpact) : undefined\n    const warningColor =\n      priceImpactWarning === 'error'\n        ? theme.critical\n        : priceImpactWarning === 'warning'\n        ? theme.deprecated_accentWarning\n        : undefined\n\n    return marketPriceImpact && priceImpactWarning && warningColor\n      ? {\n          priceImpactSeverity: {\n            type: priceImpactWarning,\n            color: warningColor,\n          },\n          displayPercentage: () => formatPercent(marketPriceImpact),\n        }\n      : undefined\n  }, [formatPercent, theme.critical, theme.deprecated_accentWarning, trade])\n}\n","import { Box } from 'nft/components/Box'\nimport styled, { keyframes } from 'styled-components'\n\nconst dash = keyframes`\n  0% {\n    stroke-dashoffset: 1000;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n`\nconst Circle = styled.circle`\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 0;\n  -webkit-animation: ${dash} linear;\n  animation: ${dash} linear;\n  animation-duration: 160s;\n  stroke: ${({ theme }) => theme.accent1};\n`\nexport const TimedLoader = () => {\n  const stroke = 1.5\n\n  return (\n    <Box display=\"flex\" position=\"absolute\">\n      <svg height=\"18px\" width=\"18px\">\n        <Circle\n          strokeWidth={`${stroke}`}\n          strokeLinecap=\"round\"\n          style={{\n            transform: 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n          }}\n          fill=\"transparent\"\n          r=\"8px\"\n          cx=\"9px\"\n          cy=\"9px\"\n        />\n      </svg>\n    </Box>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCAjRkM3MkZGODAgMCUsICNGQzcyRkY4MCAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRiOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGI6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQ==\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtZGVwcmVjYXRlZF9zdGF0ZU92ZXJsYXlIb3Zlcik7Cn0KLl8xa3Vhd2M3IHsKICBmaWx0ZXI6IGdyYXlzY2FsZSgxMDAlKTsKfQouXzFrdWF3YzkgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9Ci5fMWt1YXdjYiB7CiAgbGluZS1oZWlnaHQ6IDI0cHg7Cn0=\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetName = '_1kuawcb rgw6ezbf rgw6ezd9 rgw6ez8bh rgw6ez45r rgw6ez45l';\nexport var bagRow = '_1kuawc1 rgw6ez2dr rgw6ez2j9 rgw6ez2of rgw6ez27x rgw6ez4b9 rgw6ez3tf rgw6ez7zd rgw6ez1dr rgw6ez80x';\nexport var bagRowImage = 'rgw6ez149 rgw6ez1b9 rgw6ez49l rgw6ez80p';\nexport var bagRowPrice = '_1kuawc9 rgw6ez3sr rgw6ezbf rgw6ezd9 rgw6ez3xr';\nexport var collectionName = 'rgw6ezd3 rgw6ezb9 rgw6eze3 rgw6ez8bh rgw6ez45l rgw6ez45r rgw6ez4bf';\nexport var grayscaleImage = '_1kuawc7';\nexport var icon = 'rgw6ez3xr';\nexport var priceChangeColumn = 'rgw6ez2p3 rgw6ez28l rgw6ezlf rgw6ezqx rgw6ez4ux rgw6ez3t3 rgw6ez4b9 rgw6ez7zp rgw6ez895 rgw6ez59f rgw6ez5yr rgw6ez1dr rgw6ez7zd';\nexport var priceChangeRow = 'rgw6ezd3 rgw6ezb9 rgw6eze3 rgw6ez4dr rgw6ez3sr';\nexport var unavailableAssetsContainer = 'rgw6ez2p3 rgw6ez28l rgw6ezlf rgw6ezqx rgw6ez4ux rgw6ez3tf rgw6ez4b9 rgw6ez7zp rgw6ez895 rgw6ez59f rgw6ez6df rgw6ez5yr rgw6ez1dr';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther as ethersFormatEther } from '@ethersproject/units'\nimport clsx from 'clsx'\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\nimport { Box } from 'nft/components/Box'\nimport { Suspicious } from 'nft/components/card/icons'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ChevronDownBagIcon,\n  ChevronUpBagIcon,\n  CircularCloseIcon,\n  CloseTimerIcon,\n  SquareArrowDownIcon,\n  SquareArrowUpIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { loadingBlock } from 'nft/css/loading.css'\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\nimport { getAssetHref } from 'nft/utils'\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nimport * as styles from './BagRow.css'\n\nexport const RemoveButton = styled(ThemeButton)`\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 16px;\n  margin-left: 16px;\n  padding: 12px 14px;\n`\nconst ReviewButton = styled(ThemeButton)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  font-size: 14px;\n  padding: 8px;\n  width: 50%;\n`\nconst RemoveAssetOverlay = styled.div`\n  position: absolute;\n  display: block;\n  right: -11px;\n  top: -11px;\n  z-index: 1;\n  transition: 250ms;\n  width: 45px;\n  height: 45px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\n  <RemoveAssetOverlay onClick={onClick}>\n    <CircularCloseIcon />\n  </RemoveAssetOverlay>\n)\n\nconst NoContentContainer = () => (\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"book\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface BagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  removeAsset: (assets: GenieAsset[]) => void\n  showRemove?: boolean\n  grayscale?: boolean\n  isMobile: boolean\n}\n\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\n  const { formatEther, formatNumberOrString } = useFormatter()\n  const [loadedImage, setImageLoaded] = useState(false)\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\n\n  const [cardHovered, setCardHovered] = useState(false)\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\n\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\n  const assetEthPriceFormatted = formatEther({ input: assetEthPrice, type: NumberType.NFTToken })\n  const assetUSDPriceFormatted = formatNumberOrString({\n    input: usdPrice ? parseFloat(ethersFormatEther(assetEthPrice)) * usdPrice : usdPrice,\n    type: NumberType.FiatNFTToken,\n  })\n\n  const handleRemoveClick = useCallback(\n    (e: MouseEvent<HTMLElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      removeAsset([asset])\n    },\n    [asset, removeAsset]\n  )\n\n  return (\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        <Box position=\"relative\" display=\"flex\">\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\n          {!noImageAvailable && (\n            <Box\n              as=\"img\"\n              src={asset.smallImageUrl}\n              alt={asset.name}\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\n              onLoad={() => {\n                setImageLoaded(true)\n              }}\n              onError={() => {\n                setNoImageAvailable(true)\n              }}\n              visibility={loadedImage ? 'visible' : 'hidden'}\n            />\n          )}\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\n          {noImageAvailable && <NoContentContainer />}\n        </Box>\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'neutral2' : 'neutral1'}>\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\n            {asset.susFlag && <Suspicious />}\n          </Row>\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n          </Row>\n        </Column>\n        {showRemoveButton && (\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n            Remove\n          </RemoveButton>\n        )}\n        {(!showRemoveButton || isMobile) && (\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\n            <Box className={styles.bagRowPrice}>\n              {assetEthPriceFormatted}\n              &nbsp;ETH\n            </Box>\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\n          </Column>\n        )}\n      </Row>\n    </Link>\n  )\n}\n\ninterface PriceChangeBagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  top?: boolean\n  isMobile: boolean\n}\n\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\n  const { formatEther } = useFormatter()\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\n  const handleRemove = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = false\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  const handleKeep = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = true\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  return (\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'surface3' : 'transparent'}>\n      <Row className={styles.priceChangeRow}>\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatEther({\n          input: asset.priceInfo.ETHPrice,\n          type: NumberType.NFTToken,\n        })} ETH`}</Box>\n      </Row>\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\n      </Box>\n      <Row gap=\"8\" justifyContent=\"space-between\">\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\n          Remove\n        </ReviewButton>\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\n          Keep\n        </ReviewButton>\n      </Row>\n    </Column>\n  )\n}\n\ninterface UnavailableAssetsHeaderRowProps {\n  assets?: UpdatedGenieAsset[]\n  usdPrice?: number\n  clearUnavailableAssets: () => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  isMobile: boolean\n}\n\ninterface UnavailableAssetsPreviewProps {\n  assets: UpdatedGenieAsset[]\n}\n\nconst ASSET_PREVIEW_WIDTH = 32\nconst ASSET_PREVIEW_OFFSET = 20\n\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\n  <Column\n    display=\"grid\"\n    style={{\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\n    }}\n  >\n    {assets.map((asset, index) => (\n      <Box\n        key={`${asset.address}-${asset.tokenId}`}\n        as=\"img\"\n        src={asset.smallImageUrl}\n        width=\"32\"\n        height=\"32\"\n        borderStyle=\"solid\"\n        borderWidth=\"1px\"\n        borderColor=\"surface1\"\n        borderRadius=\"4\"\n        style={{ zIndex: index }}\n        className={styles.grayscaleImage}\n      />\n    ))}\n  </Column>\n)\n\nexport const UnavailableAssetsHeaderRow = ({\n  assets,\n  usdPrice,\n  clearUnavailableAssets,\n  didOpenUnavailableAssets,\n  setDidOpenUnavailableAssets,\n  isMobile,\n}: UnavailableAssetsHeaderRowProps) => {\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const timerLimit = 8\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (!didOpenUnavailableAssets) {\n        clearUnavailableAssets()\n        setDidOpenUnavailableAssets(false)\n      }\n      return\n    }\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1)\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\n\n  if (!assets || assets.length === 0) return null\n\n  const moreThanOneUnavailable = assets.length > 1\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\n\n  return (\n    <Column className={styles.unavailableAssetsContainer}>\n      <Column>\n        <Row\n          justifyContent=\"space-between\"\n          marginBottom={isShowingAssets ? '12' : '0'}\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\n          onClick={() => {\n            if (moreThanOneUnavailable) {\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\n              toggleOpen()\n            }\n          }}\n        >\n          <Row gap=\"12\" color=\"neutral2\" className={bodySmall}>\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\n            No longer available\n          </Row>\n          {moreThanOneUnavailable && (\n            <Row color=\"neutral2\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\n          )}\n          {!didOpenUnavailableAssets && (\n            <Row\n              position=\"relative\"\n              width=\"20\"\n              height=\"20\"\n              color=\"neutral1\"\n              justifyContent=\"center\"\n              cursor=\"pointer\"\n              onClick={clearUnavailableAssets}\n            >\n              <TimedLoader />\n              <CloseTimerIcon />\n            </Row>\n          )}\n        </Row>\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n          {isShowingAssets &&\n            assets.map((asset) => (\n              <BagRow\n                key={asset.id}\n                asset={asset}\n                usdPrice={usdPrice}\n                removeAsset={() => undefined}\n                grayscale\n                isMobile={isMobile}\n              />\n            ))}\n        </Column>\n      </Column>\n    </Column>\n  )\n}\n","import { NFTEventName } from '@uniswap/analytics-events'\nimport { sendAnalyticsEvent, Trace } from 'analytics'\nimport { useIsMobile } from 'hooks/screenSize'\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\nimport { Column } from 'nft/components/Flex'\nimport { useBag, useNativeUsdPrice } from 'nft/hooks'\nimport { BagItemStatus, BagStatus } from 'nft/types'\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useEffect, useMemo } from 'react'\n\nexport const BagContent = () => {\n  const bagStatus = useBag((s) => s.bagStatus)\n  const setBagStatus = useBag((s) => s.setBagStatus)\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => {\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\n  }, [uncheckedItemsInBag])\n\n  const ethUsdPrice = useNativeUsdPrice()\n\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\n    const unchangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\n      .map((item) => item.asset)\n    const priceChangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\n      .map((item) => item.asset)\n    const unavailableAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\n      .map((item) => item.asset)\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\n\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\n  }, [itemsInBag])\n\n  useEffect(() => {\n    const hasAssetsInReview = priceChangedAssets.length > 0\n    const hasAssets = itemsInBag.length > 0\n\n    if (hasAssetsInReview)\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_CHANGED, {\n        usd_value: ethUsdPrice,\n        bag_quantity: itemsInBag,\n        ...formatAssetEventProperties(priceChangedAssets),\n      })\n\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, ethUsdPrice])\n\n  return (\n    <>\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\n        {unavailableAssets.length > 0 && (\n          <Trace\n            name={NFTEventName.NFT_BUY_BAG_CHANGED}\n            properties={{\n              usd_value: ethUsdPrice,\n              bag_quantity: itemsInBag.length,\n              ...formatAssetEventProperties(unavailableAssets),\n            }}\n            shouldLogImpression\n          >\n            <UnavailableAssetsHeaderRow\n              assets={unavailableAssets}\n              usdPrice={ethUsdPrice}\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\n              isMobile={isMobile}\n            />\n          </Trace>\n        )}\n        {priceChangedAssets.map((asset, index) => (\n          <PriceChangeBagRow\n            key={asset.id}\n            asset={asset}\n            usdPrice={ethUsdPrice}\n            markAssetAsReviewed={markAssetAsReviewed}\n            top={index === 0 && unavailableAssets.length === 0}\n            isMobile={isMobile}\n          />\n        ))}\n      </Column>\n      <Column>\n        {unchangedAssets\n          .slice(0)\n          .reverse()\n          .map((asset) => (\n            <BagRow\n              key={asset.id}\n              asset={asset}\n              usdPrice={ethUsdPrice}\n              removeAsset={removeAssetsFromBag}\n              showRemove={true}\n              isMobile={isMobile}\n            />\n          ))}\n      </Column>\n    </>\n  )\n}\n","import { OpacityHoverState } from 'components/Common'\nimport { Trans } from 'i18n'\nimport { BagCloseIcon } from 'nft/components/icons'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { ButtonText, ThemedText } from 'theme/components'\n\nconst ClearButton = styled(ButtonText)`\n  color: ${({ theme }) => theme.neutral2};\n  cursor: pointer;\n  font-weight: 535;\n  font-size: 14px;\n  line-height: 16px;\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nconst IconWrapper = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border-radius: 8px;\n  border: none;\n  color: ${({ theme }) => theme.neutral1};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-left: auto;\n  padding: 2px;\n  opacity: 1;\n\n  ${OpacityHoverState}\n`\nconst CounterDot = styled.div<{ sizing: string }>`\n  align-items: center;\n  background-color: ${({ theme }) => theme.accent1};\n  border-radius: 100px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\n  display: flex;\n  font-size: 10px;\n  justify-content: center;\n  min-width: ${({ sizing }) => sizing};\n  min-height: ${({ sizing }) => sizing};\n  padding: 4px 6px;\n`\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  justify-content: flex-start;\n  margin: 16px 28px;\n  text-align: center;\n`\ninterface BagHeaderProps {\n  numberOfAssets: number\n  closeBag: () => void\n  resetFlow: () => void\n  isProfilePage: boolean\n}\n\nconst BASE_SIZING = 17\nconst INCREMENTAL_SIZING = 6\n\nconst getCircleSizing = (numberOfAssets: number): string => {\n  const numberOfCharacters = numberOfAssets.toString().length\n\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\n}\n\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\n\n  return (\n    <Wrapper>\n      <ThemedText.HeadlineSmall>{isProfilePage ? <Trans>Sell</Trans> : <Trans>Bag</Trans>}</ThemedText.HeadlineSmall>\n      {numberOfAssets > 0 && (\n        <>\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\n          <ClearButton onClick={resetFlow}>\n            <Trans>Clear all</Trans>\n          </ClearButton>\n        </>\n      )}\n      <IconWrapper onClick={closeBag}>\n        <BagCloseIcon data-testid=\"nft-bag-close-icon\" />\n      </IconWrapper>\n    </Wrapper>\n  )\n}\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { Center, Column } from 'nft/components/Flex'\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\nimport { subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport styled from 'styled-components'\n\nconst StyledColumn = styled(Column)`\n  gap: 12px;\n  margin-top: 68px;\n`\n\nconst EmptyState = () => {\n  const isProfilePage = useIsNftProfilePage()\n\n  return (\n    <StyledColumn>\n      <Center>\n        {isProfilePage ? (\n          <LargeTagIcon color={themeVars.colors.neutral3} />\n        ) : (\n          <BagIcon color={themeVars.colors.neutral3} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\n        )}\n      </Center>\n      {isProfilePage ? (\n        <Center data-testid=\"nft-no-nfts-selected\" className={subhead}>\n          No NFTs selected\n        </Center>\n      ) : (\n        <Column gap=\"16\">\n          <Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: '24px' }}>\n            Your bag is empty\n          </Center>\n          <Center fontSize=\"12\" fontWeight=\"book\" color=\"neutral2\" style={{ lineHeight: '16px' }}>\n            Selected NFTs will appear here\n          </Center>\n        </Column>\n      )}\n    </StyledColumn>\n  )\n}\n\nexport default EmptyState\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { useState } from 'react'\n\nimport { useIsMobile } from 'hooks/screenSize'\nimport { RemoveAssetButton, RemoveButton } from '../BagRow'\nimport * as styles from '../BagRow.css'\n\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\n  const isMobile = useIsMobile()\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    removeAsset(asset)\n  }\n\n  return (\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\n      <Box position=\"relative\" display=\"flex\">\n        {isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\n      </Box>\n      <Column overflow=\"hidden\" width=\"full\" color=\"neutral1\">\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\n        </Row>\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n        </Row>\n      </Column>\n      {hovered && !isMobile && (\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n          Remove\n        </RemoveButton>\n      )}\n    </Row>\n  )\n}\n\nexport default ProfileAssetRow\n","import { Column } from 'nft/components/Flex'\nimport { useSellAsset } from 'nft/hooks'\n\nimport ProfileAssetRow from './ProfileAssetRow'\n\nexport const ProfileBagContent = () => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  return (\n    <Column>\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\n    </Column>\n  )\n}\n","import { NFTEventName } from '@uniswap/analytics-events'\nimport { sendAnalyticsEvent } from 'analytics'\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { Trans } from 'i18n'\nimport { Box } from 'nft/components/Box'\nimport { Column } from 'nft/components/Flex'\nimport { BagFooter } from 'nft/components/bag/BagFooter'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { useBag, useProfilePageState, useSellAsset, useSubscribeScrollState } from 'nft/hooks'\nimport { BagStatus, ProfilePageStateType } from 'nft/types'\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Z_INDEX } from 'theme/zIndex'\n\nimport { useIsMobile } from 'hooks/screenSize'\nimport * as styles from './Bag.css'\nimport { BagContent } from './BagContent'\nimport { BagHeader } from './BagHeader'\nimport EmptyState from './EmptyContent'\nimport { ProfileBagContent } from './profile/ProfileBagContent'\n\nexport const BAG_WIDTH = 320\nexport const XXXL_BAG_WIDTH = 360\n\ninterface SeparatorProps {\n  top?: boolean\n  show?: boolean\n}\n\nconst BagContainer = styled.div<{ raiseZIndex: boolean; isProfilePage: boolean }>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  top: 88px;\n  right: 20px;\n  width: ${BAG_WIDTH}px;\n  height: calc(100vh - 108px);\n  background: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.surface3};\n  border-radius: 16px;\n  box-shadow: ${({ theme }) => theme.deprecated_shallowShadow};\n  z-index: ${({ raiseZIndex, isProfilePage }) =>\n    raiseZIndex ? (isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop - 1) : 3};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    right: 0px;\n    top: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: 0px;\n    border: none;\n  }\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.xxxl}px`}) {\n    width: ${XXXL_BAG_WIDTH}px;\n  }\n`\n\nconst DetailsPageBackground = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0px;\n  width: 100%;\n  height: 100%;\n`\n\nconst ContinueButton = styled.div`\n  background: ${({ theme }) => theme.accent1};\n  color: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\n  margin: 32px 28px 16px;\n  padding: 10px 0px;\n  border-radius: 12px;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 535;\n  line-height: 20px;\n  cursor: pointer;\n  transition: ${({ theme }) => theme.transition.duration.medium};\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\n  <Box\n    marginX=\"24\"\n    borderWidth=\"1px\"\n    borderStyle=\"solid\"\n    borderColor=\"transparent\"\n    borderTopColor={top ? 'transparent' : 'surface3'}\n    borderBottomColor={top ? 'surface3' : 'transparent'}\n    opacity={show ? '1' : '0'}\n    transition=\"250\"\n  />\n)\n\nconst Bag = () => {\n  const { resetSellAssets, sellAssets } = useSellAsset(({ reset, sellAssets }) => ({\n    resetSellAssets: reset,\n    sellAssets,\n  }))\n\n  const { setProfilePageState } = useProfilePageState(({ setProfilePageState }) => ({ setProfilePageState }))\n\n  const { bagStatus, bagIsLocked, reset, bagExpanded, toggleBag, setBagExpanded } = useBag((state) => ({\n    ...state,\n    bagIsLocked: state.isLocked,\n    uncheckedItemsInBag: state.itemsInBag,\n  }))\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\n\n  const isProfilePage = useIsNftProfilePage()\n  const isDetailsPage = useIsNftDetailsPage()\n  const isNFTPage = useIsNftPage()\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [isModalOpen, setModalIsOpen] = useState(false)\n  const { userCanScroll, scrollRef, scrollProgress, scrollHandler } = useSubscribeScrollState()\n\n  const handleCloseBag = useCallback(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: true })\n  }, [setBagExpanded])\n\n  useEffect(() => {\n    if (bagIsLocked && !isModalOpen) setModalIsOpen(true)\n  }, [bagIsLocked, isModalOpen])\n\n  const hasAssetsToShow = itemsInBag.length > 0\n  const isBuyingAssets = itemsInBag.length > 0\n  const isSellingAssets = sellAssets.length > 0\n\n  const shouldRenderEmptyState = Boolean(\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\n  )\n\n  const eventProperties = useMemo(\n    () => ({\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\n    }),\n    [itemsInBag]\n  )\n\n  if (!bagExpanded || !isNFTPage) {\n    return null\n  }\n\n  return (\n    <Portal>\n      <BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}>\n        <BagHeader\n          numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\n          closeBag={handleCloseBag}\n          resetFlow={isProfilePage ? resetSellAssets : reset}\n          isProfilePage={isProfilePage}\n        />\n        {shouldRenderEmptyState && <EmptyState />}\n        <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\n        <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\n          {isProfilePage ? <ProfileBagContent /> : <BagContent />}\n        </Column>\n        {hasAssetsToShow && !isProfilePage && (\n          <BagFooter setModalIsOpen={setModalIsOpen} eventProperties={eventProperties} />\n        )}\n        {isSellingAssets && isProfilePage && (\n          <ContinueButton\n            onClick={() => {\n              toggleBag()\n              setProfilePageState(ProfilePageStateType.LISTING)\n              sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\n                list_quantity: sellAssets.length,\n                collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n                token_ids: sellAssets.map((asset) => asset.tokenId),\n              })\n            }}\n          >\n            <Trans>Continue</Trans>\n          </ContinueButton>\n        )}\n      </BagContainer>\n\n      {isDetailsPage ? (\n        <DetailsPageBackground onClick={toggleBag} />\n      ) : (\n        isModalOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\n      )}\n    </Portal>\n  )\n}\n\nexport default Bag\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetsContainer = '_1jcz50r1 rgw6ez2ef rgw6ez2jx rgw6ez1yr rgw6ez8ct';\nexport var bagContainer = '_1jcz50r3 rgw6ez48r rgw6ez3f3 rgw6ez3iy rgw6ez16r rgw6ez1dr rgw6ez39l rgw6ez4qf rgw6ez7zx rgw6ez55f rgw6ez895 rgw6ez4b9';","import noop from 'utilities/src/react/noop'\n\nimport { Box } from '../Box'\nimport * as styles from './Overlay.css'\n\ninterface OverlayProps {\n  onClick?: () => void\n}\n\nexport const stopPropagation = (event: React.SyntheticEvent<HTMLElement>) => {\n  event.stopPropagation()\n  event.nativeEvent.stopImmediatePropagation()\n}\n\nexport const Overlay = ({ onClick = noop }: OverlayProps) => {\n  return <Box className={styles.overlay} onClick={onClick} />\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/modals/Overlay.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/modals/Overlay.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xOTlxZGw3MSB7CiAgb3BhY2l0eTogMC43MjsKICBvdmVyZmxvdzogaGlkZGVuOwogIHotaW5kZXg6IDEwMzg7Cn0=\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var overlay = '_199qdl71 rgw6ez3f3 rgw6ez343 rgw6ez17l rgw6ez1ef rgw6ez48r rgw6ez44l rgw6ez4u3';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { BagItemStatus } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { useBag } from './useBag'\n\nexport function useBagTotalEthPrice(): BigNumber {\n  const itemsInBag = useBag((state) => state.itemsInBag)\n\n  return useMemo(() => {\n    const totalEthPrice = itemsInBag.reduce(\n      (total, item) =>\n        item.status !== BagItemStatus.UNAVAILABLE\n          ? total.add(\n              BigNumber.from(\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\n              )\n            )\n          : total,\n      BigNumber.from(0)\n    )\n\n    return totalEthPrice\n  }, [itemsInBag])\n}\n\nexport function useBagTotalUsdPrice(): string | undefined {\n  const totalEthPrice = useBagTotalEthPrice()\n  const defaultCurrency = useCurrency('ETH')\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n\n  const usdcValue = useStablecoinValue(parsedOutputAmount)\n\n  return useMemo(() => {\n    return usdcValue?.toExact()\n  }, [usdcValue])\n}\n"],"names":["getNextBagState","wishAssetsToBuy","route","purchasingWithErc20","hasPriceAdjustment","updatedAssets","compareAssetsWithTransactionRoute","shouldRefetchCalldata","unchanged","priceChanged","unavailable","filterUpdatedAssetsByState","hasAssets","length","hasAssetsInReview","hasUnavailableAssets","shouldReview","newBagItems","map","unavailableAsset","asset","status","BagItemStatus","UNAVAILABLE","changedAsset","REVIEWING_PRICE_CHANGE","unchangedAsset","REVIEWED","createBagFromUpdatedAssets","nextBagStatus","BagStatus","IN_REVIEW","CONFIRM_REVIEW","CONFIRM_QUOTE","CONFIRMING_IN_WALLET","ADDING_TO_BAG","evaluateNextBagState","buildRoutingItem","routingItem","action","RoutingActions","Buy","marketplace","toLowerCase","amountIn","price","value","assetIn","ETHPrice","baseAsset","currency","basePrice","baseDecimals","amountOut","amount","toString","assetOut","id","decimals","address","contractAddress","priceInfo","tokenType","tokenId","orderSource","buildRouteResponse","routeResponse","useErc20Token","valueToSend","undefined","sendAmount","data","calldata","to","toAddress","usePurchaseAssets","signer","useEthersSigner","sendTransaction","useSendTransaction","state","setTransactionResponse","useTransactionResponse","setLocked","setBagLocked","setBagExpanded","reset","resetBag","useBag","useCallback","routingData","assetsToBuy","purchaseResponse","bagExpanded","useTokenInput","createWithEqualityFn","devtools","set","inputCurrency","tokenTradeInput","setInputCurrency","clearInputCurrency","setTokenTradeInput","name","shallow","useFetchAssets","account","useWeb3React","itemsInBag","uncheckedItemsInBag","setBagStatus","didOpenUnavailableAssets","setDidOpenUnavailableAssets","isLocked","bagIsLocked","setItemsInBag","useMemo","recalculateBagUsingPooledAssets","fetchGqlRoute","useNftRouteLazyQuery","purchaseAssets","resetStateBeforeFetch","FETCHING_ROUTE","variables","senderAddress","nftTrades","buildNftTradeInputFromBagItems","tokenTrades","onCompleted","nftRoute","filter","item","getPurchasableAssets","buildTradeRouteInput","swap","swapAmounts","inputAmount","outputAmount","quotient","token","isToken","chainId","isNative","pools","pool","isPool","pair","tokenAmountA","reserve0","token0","tokenAmountB","reserve1","token1","fee","liquidity","sqrtRatioX96","tickCurrent","tokenA","tokenB","buildPool","usePayWithAnyTokenSwap","trade","allowance","allowedSlippage","hasRoutes","isClassicTrade","routes","hasInputAmount","hasAllowance","useEffect","slippage","parseInt","multiply","toSignificant","mixedTokenTradeRouteInputs","v2TokenTradeRouteInputs","v3TokenTradeRouteInputs","swaps","protocol","Protocol","MIXED","push","V2","buildAllTradeRouteInputs","mixedRoutes","tradeType","TokenTradeType","ExactOutput","v2Routes","v3Routes","permitInput","permitSignature","details","expiration","nonce","sigDeadline","signature","spender","permit","slippageToleranceBasisPoints","tokenAmount","getBuyButtonStateData","buyButtonState","theme","handleClickOverride","usingPayWithAnyToken","priceImpact","defaultBuyButtonState","handleClick","buttonText","Trans","disabled","warningText","warningTextColor","deprecated_accentWarning","helperText","helperTextColor","neutral2","buttonColor","accent1","buttonTextColor","deprecated_accentTextLightPrimary","BuyButtonStates","WALLET_NOT_CONNECTED","NOT_SUPPORTED_CHAIN","INSUFFICIENT_BALANCE","ERROR","IN_WALLET_CONFIRMATION","PROCESSING_TRANSACTION","FETCHING_TOKEN_ROUTE","INVALID_TOKEN_ROUTE","NO_TOKEN_ROUTE_FOUND","surface3","neutral1","LOADING_ALLOWANCE","IN_WALLET_ALLOWANCE_APPROVAL","PROCESSING_APPROVAL","REQUIRE_APPROVAL","CONFIRM_UPDATED_PRICE","PRICE_IMPACT_HIGH","priceImpactSeverity","color","PAY","FooterContainer","styled","div","Footer","FooterHeader","Column","CurrencyRow","Row","TotalColumn","WarningIcon","AlertTriangle","WarningText","ThemedText","BodyPrimary","$color","HelperText","BodySmall","CurrencyInput","ActionButton","button","$backgroundColor","FiatLoadingBubble","LoadingBubble","PriceImpactContainer","PriceImpactRow","ValueText","Warning","children","data-testid","fontSize","lineHeight","Helper","BAG_FOOTER_CURRENCY_SEARCH_FILTERS","onlyShowCurrenciesWithBalance","InputCurrencyValue","totalEthPrice","activeCurrency","tradeState","formatEther","formatNumberOrString","useFormatter","TradeState","LOADING","input","toExact","type","NumberType","NFTToken","fontWeight","symbol","FiatValue","usdcValue","MouseoverTooltip","text","t","size","style","displayPercentage","FiatNFTToken","INVALID","NO_ROUTE_FOUND","PENDING_BAG_STATUSES","FETCHING_FINAL_ROUTE","BagFooter","setModalIsOpen","eventProperties","toggleWalletDrawer","useToggleAccountDrawer","useTheme","isSupportedChain","useIsSupportedChainId","connected","Boolean","useBagTotalEthPrice","defaultCurrency","useCurrency","inputCurrencyBalance","useTokenBalance","bagStatus","tokenSelectorOpen","setTokenSelectorOpen","useState","isPending","includes","ChainId","MAINNET","universalRouterAddress","universalRouterAddressIsLoading","loading","useNftUniversalRouterAddressQuery","fetchPolicy","useNftUniversalRouterAddress","transactionState","setTransactionState","setState","transactionStateRef","useRef","subscribe","current","TxStateType","Confirming","Denied","Invalid","WARNING","New","useSubscribeTransactionState","fetchAssets","parsedOutputAmount","tryParseCurrencyAmount","maximumAmountIn","useDebouncedTrade","TradeType","EXACT_OUTPUT","RouterPreference","API","useAutoSlippageTolerance","useDerivedPayWithAnyTokenSwapInfo","usePermit2Allowance","nftURAddress","UNIVERSAL_ROUTER_ADDRESS","getURAddress","TradeFillType","Classic","loadingAllowance","AllowanceState","formatPercent","marketPriceImpact","computeRealizedPriceImpact","priceImpactWarning","getPriceImpactWarning","warningColor","critical","usePriceImpact","fiatValueTradeInput","useStablecoinValue","fiatValueTradeOutput","balance","balanceInEth","useWalletBalance","sufficientBalance","lessThan","parseEther","gte","switchChain","useSwitchChain","VALID","allowanceRequired","REQUIRED","approveAndPermit","isApprovalPending","isApprovalLoading","traceEventProperties","usd_value","using_erc20","gap","SubHeaderSmall","onClick","sendAnalyticsEvent","NFTEventName","NFT_BUY_TOKEN_SELECTOR_CLICKED","CurrencyLogo","HeadlineSmall","ChevronDown","TraceEvent","events","BrowserEvent","NFT_BUY_BAG_PAY","element","InterfaceElementName","NFT_BUY_BAG_PAY_BUTTON","properties","shouldLogImpression","Loader","stroke","CurrencySearchModal","isOpen","onDismiss","onCurrencySelect","NFT_BUY_TOKEN_SELECTED","token_address","token_symbol","selectedCurrency","currencySearchFilters","dash","keyframes","Circle","circle","TimedLoader","Box","display","position","svg","height","width","strokeWidth","strokeLinecap","transform","transformOrigin","fill","r","cx","cy","assetName","bagRow","bagRowImage","collectionName","grayscaleImage","icon","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","RemoveAssetButton","CircularCloseIcon","NoContentContainer","background","className","styles","textAlign","left","top","br","BagRow","usdPrice","removeAsset","showRemove","grayscale","isMobile","loadedImage","setImageLoaded","noImageAvailable","setNoImageAvailable","smallImageUrl","cardHovered","setCardHovered","handleMouseEnter","handleMouseLeave","showRemoveButton","assetEthPrice","updatedPriceInfo","assetEthPriceFormatted","assetUSDPriceFormatted","parseFloat","ethersFormatEther","handleRemoveClick","e","preventDefault","stopPropagation","Link","getAssetHref","textDecoration","onMouseEnter","onMouseLeave","as","src","alt","clsx","onLoad","onError","visibility","loadingBlock","overflow","whiteSpace","susFlag","Suspicious","collectionIsVerified","VerifiedIcon","emphasis","ButtonEmphasis","medium","ButtonSize","flexShrink","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","BigNumber","from","gt","handleRemove","handleKeep","borderTopColor","SquareArrowUpIcon","SquareArrowDownIcon","marginLeft","marginRight","justifyContent","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","index","borderStyle","borderWidth","borderColor","borderRadius","zIndex","UnavailableAssetsHeaderRow","clearUnavailableAssets","toggleOpen","useReducer","s","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","marginBottom","cursor","bodySmall","slice","ChevronUpBagIcon","ChevronDownBagIcon","CloseTimerIcon","BagContent","removeAssetsFromBag","useIsMobile","ethUsdPrice","useNativeUsdPrice","unchangedAssets","priceChangedAssets","unavailableAssets","availableItems","ADDED_TO_BAG","NFT_BUY_BAG_CHANGED","bag_quantity","formatAssetEventProperties","Trace","reverse","ClearButton","ButtonText","IconWrapper","OpacityHoverState","CounterDot","sizing","Wrapper","BagHeader","numberOfAssets","closeBag","resetFlow","isProfilePage","getCircleSizing","BagCloseIcon","StyledColumn","useIsNftProfilePage","Center","LargeTagIcon","themeVars","colors","neutral3","BagIcon","subhead","useSellAsset","removeSellAsset","hovered","setHovered","handleHover","handleRemoveAsset","img","asset_contract","ProfileBagContent","sellAssets","ProfileAssetRow","BAG_WIDTH","XXXL_BAG_WIDTH","BagContainer","surface1","deprecated_shallowShadow","raiseZIndex","Z_INDEX","modalOverTooltip","modalBackdrop","breakpoint","sm","xxxl","DetailsPageBackground","ContinueButton","transition","duration","opacity","hover","ScrollingIndicator","show","marginX","borderBottomColor","resetSellAssets","setProfilePageState","useProfilePageState","toggleBag","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","isModalOpen","userCanScroll","scrollRef","scrollProgress","scrollHandler","useSubscribeScrollState","handleCloseBag","manualClose","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","EmptyState","ref","onScroll","ProfilePageStateType","LISTING","NFT_PROFILE_PAGE_START_SELL","list_quantity","collection_addresses","token_ids","Overlay","event","nativeEvent","stopImmediatePropagation","noop","reduce","total","add","useBagTotalUsdPrice"],"sourceRoot":""}