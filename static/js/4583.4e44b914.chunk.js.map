{"version":3,"file":"static/js/4583.4e44b914.chunk.js","mappings":"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","sources":["utils/getInitialLogoURL.ts","graphql/data/pools/usePoolsFromTokenAddress.ts","components/Tokens/TokenDetails/tables/TokenDetailsPoolsTable.tsx","graphql/data/useTokenTransactions.ts","components/Tokens/TokenDetails/tables/TransactionsTable.tsx","components/Tokens/TokenDetails/ActivitySection.tsx","components/Tokens/TokenDetails/BalanceSummary.tsx","components/Tokens/TokenDetails/MobileBalanceSummaryFooter.tsx","components/Tokens/TokenDetails/TokenDescription.tsx","components/Tokens/TokenDetails/index.tsx","assets/svg/eye.svg","components/Tokens/TokenDetails/InvalidTokenDetails.tsx","pages/TokenDetails/utils.ts","pages/TokenDetails/index.tsx","shared-cloud/metatags.ts","utils/addressesAreEquivalent.ts"],"sourcesContent":["import { getChainInfo, isSupportedChainId } from 'constants/chains'\nimport { isCelo, nativeOnChain } from 'constants/tokens'\nimport { isAddress } from 'utilities/src/addresses'\nimport celoLogo from '../assets/svg/celo_logo.svg'\n\nexport function getInitialLogoUrl(\n  address?: string | null,\n  chainId?: number | null,\n  isNative?: boolean,\n  backupImg?: string | null\n) {\n  const networkName = isSupportedChainId(chainId)\n    ? getChainInfo({ chainId }).assetRepoNetworkName ?? 'ethereum'\n    : 'ethereum'\n  const checksummedAddress = isAddress(address)\n\n  if (chainId && isCelo(chainId) && address === nativeOnChain(chainId).wrapped.address) {\n    return celoLogo\n  }\n\n  if (checksummedAddress) {\n    return `https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/${networkName}/assets/${checksummedAddress}/logo.png`\n  } else {\n    return backupImg ?? undefined\n  }\n}\n","import { ChainId } from '@uniswap/sdk-core'\nimport { SupportedInterfaceChainId, chainIdToBackendChain } from 'constants/chains'\nimport { PoolTableSortState, TablePool, V2_BIPS, calculateOneDayApr, sortPools } from 'graphql/data/pools/useTopPools'\nimport { useCallback, useMemo, useRef } from 'react'\nimport {\n  useTopV2PairsQuery,\n  useTopV3PoolsQuery,\n} from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\nimport { FeatureFlags } from 'uniswap/src/features/gating/flags'\nimport { useFeatureFlag } from 'uniswap/src/features/gating/hooks'\n\nconst DEFAULT_QUERY_SIZE = 20\n\nexport function usePoolsFromTokenAddress(\n  tokenAddress: string,\n  sortState: PoolTableSortState,\n  chainId?: SupportedInterfaceChainId\n) {\n  const v2ExploreEnabled = useFeatureFlag(FeatureFlags.V2Explore)\n  const {\n    loading: loadingV3,\n    error: errorV3,\n    data: dataV3,\n    fetchMore: fetchMoreV3,\n  } = useTopV3PoolsQuery({\n    variables: {\n      first: DEFAULT_QUERY_SIZE,\n      tokenAddress,\n      chain: chainIdToBackendChain({ chainId, withFallback: true }),\n    },\n  })\n\n  const {\n    loading: loadingV2,\n    error: errorV2,\n    data: dataV2,\n    fetchMore: fetchMoreV2,\n  } = useTopV2PairsQuery({\n    variables: {\n      first: DEFAULT_QUERY_SIZE,\n      tokenAddress,\n      chain: chainIdToBackendChain({ chainId, withFallback: true }),\n    },\n    skip: !chainId || (chainId !== ChainId.MAINNET && !v2ExploreEnabled),\n  })\n  const loading = loadingV3 || loadingV2\n\n  const loadingMoreV3 = useRef(false)\n  const loadingMoreV2 = useRef(false)\n  const sizeRef = useRef(DEFAULT_QUERY_SIZE)\n  const loadMore = useCallback(\n    ({ onComplete }: { onComplete?: () => void }) => {\n      if (loadingMoreV3.current || (loadingMoreV2.current && (chainId === ChainId.MAINNET || v2ExploreEnabled))) {\n        return\n      }\n      loadingMoreV3.current = true\n      loadingMoreV2.current = true\n      sizeRef.current += DEFAULT_QUERY_SIZE\n      fetchMoreV3({\n        variables: {\n          cursor: dataV3?.topV3Pools?.[dataV3.topV3Pools.length - 1]?.totalLiquidity?.value,\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult || !prev || !Object.keys(prev).length) return prev\n          if (!loadingMoreV2.current || (chainId !== ChainId.MAINNET && !v2ExploreEnabled)) onComplete?.()\n          const mergedData = {\n            topV3Pools: [...(prev.topV3Pools ?? []).slice(), ...(fetchMoreResult.topV3Pools ?? []).slice()],\n          }\n          loadingMoreV3.current = false\n          return mergedData\n        },\n      })\n      if (chainId === ChainId.MAINNET || v2ExploreEnabled) {\n        fetchMoreV2({\n          variables: {\n            cursor: dataV2?.topV2Pairs?.[dataV2.topV2Pairs.length - 1]?.totalLiquidity?.value,\n          },\n          updateQuery: (prev, { fetchMoreResult }) => {\n            if (!fetchMoreResult || !prev || !Object.keys(prev).length) return prev\n            if (!loadingMoreV3.current) onComplete?.()\n            const mergedData = {\n              topV2Pairs: [...(prev.topV2Pairs ?? []).slice(), ...(fetchMoreResult.topV2Pairs ?? []).slice()],\n            }\n            loadingMoreV2.current = false\n            return mergedData\n          },\n        })\n      }\n    },\n    [chainId, dataV2?.topV2Pairs, dataV3?.topV3Pools, fetchMoreV2, fetchMoreV3, v2ExploreEnabled]\n  )\n\n  return useMemo(() => {\n    const topV3Pools: TablePool[] =\n      dataV3?.topV3Pools?.map((pool) => {\n        return {\n          hash: pool.address,\n          token0: pool.token0,\n          token1: pool.token1,\n          txCount: pool.txCount,\n          tvl: pool.totalLiquidity?.value,\n          volume24h: pool.volume24h?.value,\n          volumeWeek: pool.volumeWeek?.value,\n          oneDayApr: calculateOneDayApr(pool.volume24h?.value, pool.totalLiquidity?.value, pool.feeTier),\n          feeTier: pool.feeTier,\n          protocolVersion: pool.protocolVersion,\n        } as TablePool\n      }) ?? []\n    const topV2Pairs: TablePool[] =\n      dataV2?.topV2Pairs?.map((pool) => {\n        return {\n          hash: pool.address,\n          token0: pool.token0,\n          token1: pool.token1,\n          txCount: pool.txCount,\n          tvl: pool.totalLiquidity?.value,\n          volume24h: pool.volume24h?.value,\n          volumeWeek: pool.volumeWeek?.value,\n          oneDayApr: calculateOneDayApr(pool.volume24h?.value, pool.totalLiquidity?.value, V2_BIPS),\n          feeTier: V2_BIPS,\n          protocolVersion: pool.protocolVersion,\n        } as TablePool\n      }) ?? []\n\n    const pools = sortPools([...topV3Pools, ...topV2Pairs], sortState).slice(0, sizeRef.current)\n    return { loading, errorV2, errorV3, pools, loadMore }\n  }, [dataV2?.topV2Pairs, dataV3?.topV3Pools, errorV2, errorV3, loadMore, loading, sortState])\n}\n","import { ApolloError } from '@apollo/client'\nimport { Token } from '@uniswap/sdk-core'\nimport { PoolTableColumns, PoolsTable, sortAscendingAtom, sortMethodAtom } from 'components/Pools/PoolTable/PoolTable'\nimport { SupportedInterfaceChainId } from 'constants/chains'\nimport { useUpdateManualOutage } from 'featureFlags/flags/outageBanner'\nimport { usePoolsFromTokenAddress } from 'graphql/data/pools/usePoolsFromTokenAddress'\nimport { OrderDirection } from 'graphql/data/util'\nimport { useAtomValue, useResetAtom } from 'jotai/utils'\nimport { useEffect, useMemo } from 'react'\n\nconst HIDDEN_COLUMNS = [PoolTableColumns.Transactions]\n\nexport function TokenDetailsPoolsTable({\n  chainId,\n  referenceToken,\n}: {\n  chainId: SupportedInterfaceChainId\n  referenceToken: Token\n}) {\n  const sortMethod = useAtomValue(sortMethodAtom)\n  const sortAscending = useAtomValue(sortAscendingAtom)\n  const sortState = useMemo(\n    () => ({ sortBy: sortMethod, sortDirection: sortAscending ? OrderDirection.Asc : OrderDirection.Desc }),\n    [sortAscending, sortMethod]\n  )\n  const { pools, loading, errorV2, errorV3, loadMore } = usePoolsFromTokenAddress(\n    referenceToken.address,\n    sortState,\n    chainId\n  )\n  const combinedError =\n    errorV2 && errorV3\n      ? new ApolloError({\n          errorMessage: `Could not retrieve V2 and V3 Pools for token ${referenceToken.address} on chain: ${chainId}`,\n        })\n      : undefined\n  const allDataStillLoading = loading && !pools.length\n  useUpdateManualOutage({ chainId, errorV3, errorV2 })\n\n  const resetSortMethod = useResetAtom(sortMethodAtom)\n  const resetSortAscending = useResetAtom(sortAscendingAtom)\n  useEffect(() => {\n    resetSortMethod()\n    resetSortAscending()\n  }, [resetSortAscending, resetSortMethod])\n\n  return (\n    <div data-testid={`tdp-pools-table-${referenceToken.address.toLowerCase()}`}>\n      <PoolsTable\n        pools={pools}\n        loading={allDataStillLoading}\n        error={combinedError}\n        chainId={chainId}\n        maxHeight={600}\n        hiddenColumns={HIDDEN_COLUMNS}\n        loadMore={loadMore}\n      />\n    </div>\n  )\n}\n","import { ChainId } from '@uniswap/sdk-core'\nimport { SupportedInterfaceChainId, chainIdToBackendChain } from 'constants/chains'\nimport { useCallback, useMemo, useRef } from 'react'\nimport {\n  Chain,\n  PoolTransaction,\n  PoolTransactionType,\n  useV2TokenTransactionsQuery,\n  useV3TokenTransactionsQuery,\n} from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\nimport { FeatureFlags } from 'uniswap/src/features/gating/flags'\nimport { useFeatureFlag } from 'uniswap/src/features/gating/hooks'\n\nexport enum TokenTransactionType {\n  BUY = 'Buy',\n  SELL = 'Sell',\n}\n\nconst TokenTransactionDefaultQuerySize = 25\n\nexport function useTokenTransactions(\n  address: string,\n  chainId: SupportedInterfaceChainId,\n  filter: TokenTransactionType[] = [TokenTransactionType.BUY, TokenTransactionType.SELL]\n) {\n  const v2ExploreEnabled = useFeatureFlag(FeatureFlags.V2Explore)\n  const {\n    data: dataV3,\n    loading: loadingV3,\n    fetchMore: fetchMoreV3,\n    error: errorV3,\n  } = useV3TokenTransactionsQuery({\n    variables: {\n      address: address.toLowerCase(),\n      chain: chainIdToBackendChain({ chainId, withFallback: true }),\n      first: TokenTransactionDefaultQuerySize,\n    },\n  })\n  const {\n    data: dataV2,\n    loading: loadingV2,\n    error: errorV2,\n    fetchMore: fetchMoreV2,\n  } = useV2TokenTransactionsQuery({\n    variables: {\n      address: address.toLowerCase(),\n      first: TokenTransactionDefaultQuerySize,\n      chain: chainIdToBackendChain({ chainId }),\n    },\n    skip: chainId !== ChainId.MAINNET && !v2ExploreEnabled,\n  })\n  const loadingMoreV3 = useRef(false)\n  const loadingMoreV2 = useRef(false)\n  const querySizeRef = useRef(TokenTransactionDefaultQuerySize)\n  const loadMore = useCallback(\n    ({ onComplete }: { onComplete?: () => void }) => {\n      if (loadingMoreV3.current || (loadingMoreV2.current && (chainId === ChainId.MAINNET || v2ExploreEnabled))) {\n        return\n      }\n      loadingMoreV3.current = true\n      loadingMoreV2.current = true\n      querySizeRef.current += TokenTransactionDefaultQuerySize\n      fetchMoreV3({\n        variables: {\n          cursor: dataV3?.token?.v3Transactions?.[dataV3.token?.v3Transactions.length - 1]?.timestamp,\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) {\n            return prev\n          }\n          if (!loadingMoreV2.current || (chainId !== ChainId.MAINNET && !v2ExploreEnabled)) onComplete?.()\n          const mergedData = {\n            token: {\n              ...prev.token,\n              id: prev?.token?.id ?? '',\n              chain: prev?.token?.chain ?? Chain.Ethereum,\n              v3Transactions: [...(prev.token?.v3Transactions ?? []), ...(fetchMoreResult.token?.v3Transactions ?? [])],\n            },\n          }\n          loadingMoreV3.current = false\n          return mergedData\n        },\n      })\n      if (chainId === ChainId.MAINNET || v2ExploreEnabled) {\n        fetchMoreV2({\n          variables: {\n            cursor: dataV2?.token?.v2Transactions?.[dataV2.token?.v2Transactions.length - 1]?.timestamp,\n          },\n          updateQuery: (prev, { fetchMoreResult }) => {\n            if (!fetchMoreResult) return prev\n            if (!loadingMoreV3.current) onComplete?.()\n            const mergedData = {\n              token: {\n                ...prev.token,\n                id: prev?.token?.id ?? '',\n                chain: prev?.token?.chain ?? Chain.Ethereum,\n                v2Transactions: [\n                  ...(prev.token?.v2Transactions ?? []),\n                  ...(fetchMoreResult.token?.v2Transactions ?? []),\n                ],\n              },\n            }\n            loadingMoreV2.current = false\n            return mergedData\n          },\n        })\n      }\n    },\n    [chainId, dataV2?.token?.v2Transactions, dataV3?.token?.v3Transactions, fetchMoreV2, fetchMoreV3, v2ExploreEnabled]\n  )\n\n  const transactions = useMemo(\n    () =>\n      [\n        ...(dataV3?.token?.v3Transactions?.filter((tx) => {\n          if (!tx) {\n            return false\n          }\n          const tokenBeingSold = parseFloat(tx.token0Quantity) < 0 ? tx.token0 : tx.token1\n          const isSell = tokenBeingSold.address?.toLowerCase() === address.toLowerCase()\n          return (\n            tx.type === PoolTransactionType.Swap &&\n            filter.includes(isSell ? TokenTransactionType.SELL : TokenTransactionType.BUY)\n          )\n        }) ?? []),\n        ...(dataV2?.token?.v2Transactions?.filter((tx) => {\n          if (!tx) {\n            return false\n          }\n          const tokenBeingSold = parseFloat(tx.token0Quantity) < 0 ? tx.token0 : tx.token1\n          const isSell = tokenBeingSold.address?.toLowerCase() === address.toLowerCase()\n          return (\n            tx.type === PoolTransactionType.Swap &&\n            filter.includes(isSell ? TokenTransactionType.SELL : TokenTransactionType.BUY)\n          )\n        }) ?? []),\n      ]\n        .sort((a, b): number =>\n          a?.timestamp && b?.timestamp ? b.timestamp - a.timestamp : a?.timestamp === null ? -1 : 1\n        )\n        .slice(0, querySizeRef.current),\n    [address, dataV2?.token?.v2Transactions, dataV3?.token?.v3Transactions, filter]\n  )\n\n  return useMemo(() => {\n    return {\n      transactions: transactions as PoolTransaction[],\n      loading: loadingV3 || loadingV2,\n      loadMore,\n      errorV2,\n      errorV3,\n    }\n  }, [transactions, loadingV3, loadingV2, loadMore, errorV2, errorV3])\n}\n","import { ApolloError } from '@apollo/client'\nimport { createColumnHelper } from '@tanstack/react-table'\nimport { Token } from '@uniswap/sdk-core'\nimport Row from 'components/Row'\nimport { Table } from 'components/Table'\nimport { Cell } from 'components/Table/Cell'\nimport { Filter } from 'components/Table/Filter'\nimport {\n  FilterHeaderRow,\n  HeaderArrow,\n  HeaderSortText,\n  StyledExternalLink,\n  TimestampCell,\n  TokenLinkCell,\n} from 'components/Table/styled'\nimport { SupportedInterfaceChainId } from 'constants/chains'\nimport { useUpdateManualOutage } from 'featureFlags/flags/outageBanner'\nimport { TokenTransactionType, useTokenTransactions } from 'graphql/data/useTokenTransactions'\nimport { unwrapToken } from 'graphql/data/util'\nimport { OrderDirection, Swap_OrderBy } from 'graphql/thegraph/__generated__/types-and-hooks'\nimport { useActiveLocalCurrency } from 'hooks/useActiveLocalCurrency'\nimport { Trans } from 'i18n'\nimport { useMemo, useReducer, useState } from 'react'\nimport styled from 'styled-components'\nimport { EllipsisStyle, ThemedText } from 'theme/components'\nimport { Token as GQLToken } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\nimport { shortenAddress } from 'utilities/src/addresses'\nimport { useFormatter } from 'utils/formatNumbers'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\n\nconst StyledSwapAmount = styled(ThemedText.BodyPrimary)`\n  display: inline-block;\n  ${EllipsisStyle}\n  max-width: 75px;\n`\n\nconst TableWrapper = styled.div`\n  min-height: 158px;\n`\ninterface SwapTransaction {\n  hash: string\n  timestamp: number\n  input: SwapLeg\n  output: SwapLeg\n  usdValue: number\n  makerAddress: string\n}\n\ninterface SwapLeg {\n  address?: string\n  symbol?: string\n  amount: number\n  token: GQLToken\n}\n\ntype TokenTxTableSortState = {\n  sortBy: Swap_OrderBy\n  sortDirection: OrderDirection\n}\n\nexport function TransactionsTable({\n  chainId,\n  referenceToken,\n}: {\n  chainId: SupportedInterfaceChainId\n  referenceToken: Token\n}) {\n  const activeLocalCurrency = useActiveLocalCurrency()\n  const { formatNumber, formatFiatPrice } = useFormatter()\n  const [filterModalIsOpen, toggleFilterModal] = useReducer((s) => !s, false)\n  const [filter, setFilters] = useState<TokenTransactionType[]>([TokenTransactionType.BUY, TokenTransactionType.SELL])\n  const [sortState] = useState<TokenTxTableSortState>({\n    sortBy: Swap_OrderBy.Timestamp,\n    sortDirection: OrderDirection.Desc,\n  })\n  const { transactions, loading, loadMore, errorV2, errorV3 } = useTokenTransactions(\n    referenceToken.address,\n    chainId,\n    filter\n  )\n  const combinedError =\n    errorV2 && errorV3\n      ? new ApolloError({\n          errorMessage: `Could not retrieve V2 and V3 Transactions for token: ${referenceToken.address} on chain: ${chainId}`,\n        })\n      : undefined\n  const allDataStillLoading = loading && !transactions.length\n  useUpdateManualOutage({ chainId, errorV3, errorV2 })\n  const unwrappedReferenceToken = unwrapToken(chainId, referenceToken)\n\n  const data = useMemo(\n    () =>\n      transactions.map((transaction) => {\n        const swapLeg0 = {\n          address: transaction.token0.address,\n          symbol: transaction.token0.symbol,\n          amount: parseFloat(transaction.token0Quantity),\n          token: transaction.token0,\n        }\n        const swapLeg1 = {\n          address: transaction.token1.address,\n          symbol: transaction.token1.symbol,\n          amount: parseFloat(transaction.token1Quantity),\n          token: transaction.token1,\n        }\n        const token0IsBeingSold = parseFloat(transaction.token0Quantity) > 0\n        return {\n          hash: transaction.hash,\n          timestamp: transaction.timestamp,\n          input: token0IsBeingSold ? swapLeg0 : swapLeg1,\n          output: token0IsBeingSold ? swapLeg1 : swapLeg0,\n          usdValue: transaction.usdValue.value,\n          makerAddress: transaction.account,\n        }\n      }),\n    [transactions]\n  )\n\n  const showLoadingSkeleton = allDataStillLoading || !!combinedError\n  // TODO(WEB-3236): once GQL BE Transaction query is supported add usd, token0 amount, and token1 amount sort support\n  const columns = useMemo(() => {\n    const columnHelper = createColumnHelper<SwapTransaction>()\n    return [\n      columnHelper.accessor((row) => row, {\n        id: 'timestamp',\n        header: () => (\n          <Cell minWidth={120} justifyContent=\"flex-start\" grow>\n            <Row gap=\"xs\">\n              {sortState.sortBy === Swap_OrderBy.Timestamp && <HeaderArrow direction={sortState.sortDirection} />}\n              <HeaderSortText $active={sortState.sortBy === Swap_OrderBy.Timestamp}>\n                <Trans>Time</Trans>\n              </HeaderSortText>\n            </Row>\n          </Cell>\n        ),\n        cell: (row) => (\n          <Cell loading={showLoadingSkeleton} minWidth={120} justifyContent=\"flex-start\" grow>\n            <TimestampCell\n              timestamp={Number(row.getValue?.().timestamp)}\n              link={getExplorerLink(chainId, row.getValue?.().hash, ExplorerDataType.TRANSACTION)}\n            />\n          </Cell>\n        ),\n      }),\n      columnHelper.accessor((row) => row.output.address, {\n        id: 'swap-type',\n        header: () => (\n          <Cell minWidth={75} justifyContent=\"flex-start\" grow>\n            <FilterHeaderRow modalOpen={filterModalIsOpen} onClick={toggleFilterModal}>\n              <Filter\n                allFilters={Object.values(TokenTransactionType)}\n                activeFilter={filter}\n                setFilters={setFilters}\n                isOpen={filterModalIsOpen}\n                toggleFilterModal={toggleFilterModal}\n              />\n              <ThemedText.BodySecondary>\n                <Trans>Type</Trans>\n              </ThemedText.BodySecondary>\n            </FilterHeaderRow>\n          </Cell>\n        ),\n        cell: (outputTokenAddress) => {\n          const isBuy = String(outputTokenAddress.getValue?.()).toLowerCase() === referenceToken.address.toLowerCase()\n          return (\n            <Cell loading={showLoadingSkeleton} minWidth={75} justifyContent=\"flex-start\" grow>\n              <ThemedText.BodyPrimary color={isBuy ? 'success' : 'critical'}>\n                {isBuy ? <Trans>Buy</Trans> : <Trans>Sell</Trans>}\n              </ThemedText.BodyPrimary>\n            </Cell>\n          )\n        },\n      }),\n      columnHelper.accessor(\n        (row) =>\n          row.input.address?.toLowerCase() === referenceToken.address.toLowerCase()\n            ? row.input.amount\n            : row.output.amount,\n        {\n          id: 'reference-amount',\n          header: () => (\n            <Cell minWidth={100} justifyContent=\"flex-end\">\n              <ThemedText.BodySecondary>${unwrappedReferenceToken.symbol}</ThemedText.BodySecondary>\n            </Cell>\n          ),\n          cell: (inputTokenAmount) => (\n            <Cell loading={showLoadingSkeleton} minWidth={100} justifyContent=\"flex-end\">\n              <ThemedText.BodyPrimary>\n                {formatNumber({\n                  input: Math.abs(inputTokenAmount.getValue?.()) || 0,\n                })}\n              </ThemedText.BodyPrimary>\n            </Cell>\n          ),\n        }\n      ),\n      columnHelper.accessor(\n        (row) => {\n          const nonReferenceSwapLeg =\n            row.input.address?.toLowerCase() === referenceToken.address.toLowerCase() ? row.output : row.input\n          return (\n            <Row gap=\"8px\" justify=\"flex-end\">\n              <StyledSwapAmount>\n                {formatNumber({\n                  input: Math.abs(nonReferenceSwapLeg.amount) || 0,\n                })}\n              </StyledSwapAmount>\n              <TokenLinkCell token={nonReferenceSwapLeg.token} />\n            </Row>\n          )\n        },\n        {\n          id: 'non-reference-amount',\n          header: () => (\n            <Cell minWidth={160} justifyContent=\"flex-end\">\n              <ThemedText.BodySecondary>\n                <Trans>For</Trans>\n              </ThemedText.BodySecondary>\n            </Cell>\n          ),\n          cell: (swapOutput) => (\n            <Cell loading={showLoadingSkeleton} minWidth={160} justifyContent=\"flex-end\">\n              {swapOutput.getValue?.()}\n            </Cell>\n          ),\n        }\n      ),\n      columnHelper.accessor((row) => row.usdValue, {\n        id: 'fiat-value',\n        header: () => (\n          <Cell minWidth={125} justifyContent=\"flex-end\">\n            <Row gap=\"xs\" justify=\"flex-end\">\n              {sortState.sortBy === Swap_OrderBy.AmountUsd && <HeaderArrow direction={sortState.sortDirection} />}\n              <HeaderSortText $active={sortState.sortBy === Swap_OrderBy.AmountUsd}>\n                {activeLocalCurrency}\n              </HeaderSortText>\n            </Row>\n          </Cell>\n        ),\n        cell: (fiat) => (\n          <Cell loading={showLoadingSkeleton} minWidth={125} justifyContent=\"flex-end\">\n            <ThemedText.BodyPrimary>{formatFiatPrice({ price: fiat.getValue?.() })}</ThemedText.BodyPrimary>\n          </Cell>\n        ),\n      }),\n      columnHelper.accessor((row) => row.makerAddress, {\n        id: 'maker-address',\n        header: () => (\n          <Cell minWidth={150} justifyContent=\"flex-end\">\n            <ThemedText.BodySecondary>\n              <Trans>Wallet</Trans>\n            </ThemedText.BodySecondary>\n          </Cell>\n        ),\n        cell: (makerAddress) => (\n          <Cell loading={showLoadingSkeleton} minWidth={150} justifyContent=\"flex-end\">\n            <StyledExternalLink href={getExplorerLink(chainId, makerAddress.getValue?.(), ExplorerDataType.ADDRESS)}>\n              {shortenAddress(makerAddress.getValue?.())}\n            </StyledExternalLink>\n          </Cell>\n        ),\n      }),\n    ]\n  }, [\n    sortState.sortBy,\n    sortState.sortDirection,\n    showLoadingSkeleton,\n    chainId,\n    filterModalIsOpen,\n    filter,\n    referenceToken.address,\n    unwrappedReferenceToken.symbol,\n    formatNumber,\n    activeLocalCurrency,\n    formatFiatPrice,\n  ])\n\n  return (\n    <TableWrapper>\n      <Table\n        columns={columns}\n        data={data}\n        loading={allDataStillLoading}\n        error={combinedError}\n        loadMore={loadMore}\n        maxHeight={600}\n      />\n    </TableWrapper>\n  )\n}\n","import Row from 'components/Row'\nimport { TokenDetailsPoolsTable } from 'components/Tokens/TokenDetails/tables/TokenDetailsPoolsTable'\nimport { Trans } from 'i18n'\nimport { useState } from 'react'\nimport styled from 'styled-components'\nimport { ClickableStyle, ThemedText } from 'theme/components'\n\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\nimport { TransactionsTable } from './tables/TransactionsTable'\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`\nconst Tab = styled(ThemedText.HeadlineMedium)<{ isActive?: boolean }>`\n  cursor: pointer;\n  color: ${({ isActive, theme }) => (isActive ? theme.neutral1 : theme.neutral2)};\n  ${ClickableStyle};\n`\nenum ActivityTab {\n  Txs,\n  Pools,\n}\nexport function ActivitySection() {\n  const { wrapped: referenceToken, chainId } = useTDPContext().currency\n\n  const [activityInView, setActivityInView] = useState(ActivityTab.Txs)\n\n  if (!referenceToken) {\n    return null\n  }\n  return (\n    <Container data-testid=\"token-details-activity-section\">\n      <Row gap=\"24px\" marginBottom=\"24px\" id=\"activity-header\">\n        <Tab isActive={activityInView === ActivityTab.Txs} onClick={() => setActivityInView(ActivityTab.Txs)}>\n          <Trans>Transactions</Trans>\n        </Tab>\n        <Tab isActive={activityInView === ActivityTab.Pools} onClick={() => setActivityInView(ActivityTab.Pools)}>\n          <Trans>Pools</Trans>\n        </Tab>\n      </Row>\n      {activityInView === ActivityTab.Txs && <TransactionsTable chainId={chainId} referenceToken={referenceToken} />}\n      {activityInView === ActivityTab.Pools && (\n        <TokenDetailsPoolsTable chainId={chainId} referenceToken={referenceToken} />\n      )}\n    </Container>\n  )\n}\n","import { ChainId, Currency } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { PortfolioLogo } from 'components/AccountDrawer/MiniPortfolio/PortfolioLogo'\nimport { getTokenDetailsURL, gqlToCurrency, supportedChainIdFromGQLChain } from 'graphql/data/util'\nimport { Trans } from 'i18n'\nimport { useMemo } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport {\n  Chain,\n  PortfolioTokenBalancePartsFragment,\n} from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\n\nconst BalancesCard = styled.div`\n  color: ${({ theme }) => theme.neutral1};\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  height: fit-content;\n  width: 100%;\n\n  // 768 hardcoded to match NFT-redesign navbar breakpoints\n  // src/nft/css/sprinkles.css.ts\n  // change to match theme breakpoints when this navbar is updated\n  @media screen and (min-width: 768px) {\n    display: flex;\n  }\n`\nconst BalanceSection = styled.div`\n  height: fit-content;\n  width: 100%;\n`\nconst BalanceRow = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  margin-top: 12px;\n`\nconst BalanceItem = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst BalanceAmountsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  margin-left: 12px;\n`\n\ninterface BalanceProps {\n  currency?: Currency\n  chainId?: ChainId\n  gqlBalance?: PortfolioTokenBalancePartsFragment\n  onClick?: () => void\n}\nconst Balance = ({ currency, chainId = ChainId.MAINNET, gqlBalance, onClick }: BalanceProps) => {\n  const { formatNumber } = useFormatter()\n  const currencies = useMemo(() => [currency], [currency])\n\n  const formattedGqlBalance = formatNumber({\n    input: gqlBalance?.quantity,\n    type: NumberType.TokenNonTx,\n  })\n  const formattedUsdGqlValue = formatNumber({\n    input: gqlBalance?.denominatedValue?.value,\n    type: NumberType.PortfolioBalance,\n  })\n\n  return (\n    <BalanceRow onClick={onClick}>\n      <PortfolioLogo\n        currencies={currencies}\n        chainId={chainId}\n        images={[gqlBalance?.tokenProjectMarket?.tokenProject.logoUrl]}\n        size={32}\n      />\n      <BalanceAmountsContainer>\n        <BalanceItem>\n          <ThemedText.BodyPrimary>{formattedUsdGqlValue}</ThemedText.BodyPrimary>\n        </BalanceItem>\n        <BalanceItem>\n          <ThemedText.BodySecondary>{formattedGqlBalance}</ThemedText.BodySecondary>\n        </BalanceItem>\n      </BalanceAmountsContainer>\n    </BalanceRow>\n  )\n}\n\nconst PageChainBalanceSummary = ({ pageChainBalance }: { pageChainBalance?: PortfolioTokenBalancePartsFragment }) => {\n  if (!pageChainBalance || !pageChainBalance.token) return null\n  const currency = gqlToCurrency(pageChainBalance.token)\n  return (\n    <BalanceSection>\n      <ThemedText.HeadlineSmall color=\"neutral1\">\n        <Trans>Your balance</Trans>\n      </ThemedText.HeadlineSmall>\n      <Balance currency={currency} chainId={currency?.chainId} gqlBalance={pageChainBalance} />\n    </BalanceSection>\n  )\n}\n\nconst OtherChainsBalanceSummary = ({\n  otherChainBalances,\n  hasPageChainBalance,\n}: {\n  otherChainBalances: readonly PortfolioTokenBalancePartsFragment[]\n  hasPageChainBalance: boolean\n}) => {\n  const navigate = useNavigate()\n\n  if (!otherChainBalances.length) return null\n  return (\n    <BalanceSection>\n      {hasPageChainBalance ? (\n        <ThemedText.SubHeaderSmall>\n          <Trans>On other networks</Trans>\n        </ThemedText.SubHeaderSmall>\n      ) : (\n        <ThemedText.HeadlineSmall>\n          <Trans>Balance on other networks</Trans>\n        </ThemedText.HeadlineSmall>\n      )}\n      {otherChainBalances.map((balance) => {\n        const currency = balance.token && gqlToCurrency(balance.token)\n        const chainId = (balance.token && supportedChainIdFromGQLChain(balance.token.chain)) ?? ChainId.MAINNET\n        return (\n          <Balance\n            key={balance.id}\n            currency={currency}\n            chainId={chainId}\n            gqlBalance={balance}\n            onClick={() =>\n              navigate(\n                getTokenDetailsURL({\n                  address: balance.token?.address,\n                  chain: balance.token?.chain ?? Chain.Ethereum,\n                })\n              )\n            }\n          />\n        )\n      })}\n    </BalanceSection>\n  )\n}\n\nexport default function BalanceSummary() {\n  const { account } = useWeb3React()\n  const { currencyChain, multiChainMap } = useTDPContext()\n\n  const pageChainBalance = multiChainMap[currencyChain]?.balance\n  const otherChainBalances: PortfolioTokenBalancePartsFragment[] = []\n  for (const [key, value] of Object.entries(multiChainMap)) {\n    if (key !== currencyChain && value?.balance !== undefined) {\n      otherChainBalances.push(value.balance)\n    }\n  }\n  const hasBalances = pageChainBalance || Boolean(otherChainBalances.length)\n\n  if (!account || !hasBalances) {\n    return null\n  }\n  return (\n    <BalancesCard>\n      <PageChainBalanceSummary pageChainBalance={pageChainBalance} />\n      <OtherChainsBalanceSummary otherChainBalances={otherChainBalances} hasPageChainBalance={!!pageChainBalance} />\n    </BalancesCard>\n  )\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { chainIdToBackendChain, useSupportedChainId } from 'constants/chains'\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\nimport { Trans } from 'i18n'\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\nimport styled from 'styled-components'\nimport { StyledInternalLink, ThemedText } from 'theme/components'\nimport { Z_INDEX } from 'theme/zIndex'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nconst Wrapper = styled.div`\n  align-content: center;\n  align-items: center;\n  background-color: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.surface3};\n  color: ${({ theme }) => theme.neutral2};\n  display: none;\n  flex-direction: row;\n  font-weight: 535;\n  font-size: 14px;\n  height: fit-content;\n  justify-content: space-between;\n  left: 0;\n  line-height: 20px;\n  position: fixed;\n  z-index: ${Z_INDEX.sticky};\n  border-radius: 20px;\n  bottom: 56px;\n  margin: 8px;\n  padding: 12px 32px;\n  width: calc(100vw - 16px);\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    bottom: 0px;\n  }\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.lg}px) {\n    display: flex;\n  }\n`\nconst BalanceValue = styled.div`\n  color: ${({ theme }) => theme.neutral1};\n  font-size: 20px;\n  line-height: 20px;\n  display: flex;\n  gap: 8px;\n`\nconst Balance = styled.div`\n  align-items: flex-end;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 8px;\n`\nconst BalanceInfo = styled.div`\n  display: flex;\n  flex: 10 1 auto;\n  flex-direction: column;\n  justify-content: flex-start;\n  gap: 6px;\n`\nconst FiatValue = styled(ThemedText.Caption)`\n  font-size: 12px;\n  line-height: 16px;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.sm}px) {\n    line-height: 24px;\n  }\n`\nconst SwapButton = styled(StyledInternalLink)`\n  background-color: ${({ theme }) => theme.accent1};\n  border: none;\n  border-radius: 22px;\n  color: ${({ theme }) => theme.neutralContrast};\n  display: flex;\n  flex: 1 1 auto;\n  padding: 12px 16px;\n  font-size: 16px;\n  font-weight: 535;\n  height: 44px;\n  justify-content: center;\n  margin: auto;\n  max-width: 100vw;\n`\n\nexport default function MobileBalanceSummaryFooter() {\n  const { currency, multiChainMap, currencyChain } = useTDPContext()\n  const supportedChain = useSupportedChainId(currency.chainId)\n  const pageChainBalance = multiChainMap[currencyChain]?.balance\n\n  const { account } = useWeb3React()\n  const { formatNumber } = useFormatter()\n\n  const formattedGqlBalance = formatNumber({\n    input: pageChainBalance?.quantity,\n    type: NumberType.TokenNonTx,\n  })\n  const formattedUsdGqlValue = formatNumber({\n    input: pageChainBalance?.denominatedValue?.value,\n    type: NumberType.PortfolioBalance,\n  })\n  const chain = chainIdToBackendChain({ chainId: supportedChain }) ?? ''\n\n  return (\n    <Wrapper>\n      {Boolean(account && pageChainBalance) && (\n        <BalanceInfo>\n          <Trans>Your balance</Trans>\n          <Balance>\n            <BalanceValue>\n              {formattedGqlBalance} {currency.symbol}\n            </BalanceValue>\n            <FiatValue>{formattedUsdGqlValue}</FiatValue>\n          </Balance>\n        </BalanceInfo>\n      )}\n      <SwapButton to={`/swap?chain=${chain}&outputCurrency=${currency.isNative ? NATIVE_CHAIN_ID : currency.address}`}>\n        <Trans>Swap</Trans>\n      </SwapButton>\n    </Wrapper>\n  )\n}\n","import { ChainId } from '@uniswap/sdk-core'\nimport Column from 'components/Column'\nimport { EtherscanLogo } from 'components/Icons/Etherscan'\nimport { Globe } from 'components/Icons/Globe'\nimport { TwitterXLogo } from 'components/Icons/TwitterX'\nimport Row from 'components/Row'\nimport { FOTTooltipContent } from 'components/swap/SwapLineItem'\nimport { NoInfoAvailable, truncateDescription, TruncateDescriptionButton } from 'components/Tokens/TokenDetails/shared'\nimport Tooltip, { MouseoverTooltip, TooltipSize } from 'components/Tooltip'\nimport useCopyClipboard from 'hooks/useCopyClipboard'\nimport { useSwapTaxes } from 'hooks/useSwapTaxes'\nimport { t, Trans } from 'i18n'\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\nimport { useCallback, useReducer } from 'react'\nimport { Copy } from 'react-feather'\nimport styled, { useTheme } from 'styled-components'\nimport { ClickableStyle, EllipsisStyle, ExternalLink, ThemedText } from 'theme/components'\nimport { shortenAddress } from 'utilities/src/addresses'\nimport { useFormatter } from 'utils/formatNumbers'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\n\nconst TokenInfoSection = styled(Column)`\n  gap: 16px;\n  width: 100%;\n\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.lg}px) {\n    gap: 24px;\n  }\n`\n\nconst InfoSectionHeader = styled(ThemedText.HeadlineSmall)`\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.lg}px) {\n    font-size: 28px !important;\n    line-height: 36px !important;\n  }\n`\n\nconst TokenNameRow = styled(Row)`\n  gap: 8px;\n  width: 100%;\n`\n\nconst TokenButtonRow = styled(TokenNameRow)`\n  flex-wrap: wrap;\n`\n\nconst TokenInfoButton = styled(Row)`\n  gap: 8px;\n  padding: 8px 12px;\n  border-radius: 20px;\n  color: ${({ theme }) => theme.neutral1};\n  background-color: ${({ theme }) => theme.surface2};\n  font-size: 14px;\n  font-weight: 535;\n  line-height: 16px;\n  width: max-content;\n  ${ClickableStyle}\n`\n\nconst TokenDescriptionContainer = styled(ThemedText.BodyPrimary)`\n  ${EllipsisStyle}\n  max-width: 100%;\n  // max-height: fit-content;\n  line-height: 24px;\n  white-space: pre-wrap;\n`\n\nconst DescriptionVisibilityWrapper = styled.p<{ $visible: boolean }>`\n  display: ${({ $visible }) => ($visible ? 'inline' : 'none')};\n`\n\nconst TRUNCATE_CHARACTER_COUNT = 200\n\nexport function TokenDescription() {\n  const { address, currency, tokenQuery } = useTDPContext()\n  const { neutral2 } = useTheme()\n\n  const { description, homepageUrl, twitterName } = tokenQuery.data?.token?.project ?? {}\n  const explorerUrl = getExplorerLink(\n    currency.chainId,\n    address,\n    currency.isNative ? ExplorerDataType.NATIVE : ExplorerDataType.TOKEN\n  )\n\n  const [isCopied, setCopied] = useCopyClipboard()\n  const copy = useCallback(() => {\n    setCopied(address)\n  }, [address, setCopied])\n\n  const [isDescriptionTruncated, toggleIsDescriptionTruncated] = useReducer((x) => !x, true)\n  const truncatedDescription = truncateDescription(description ?? '', TRUNCATE_CHARACTER_COUNT)\n  const shouldTruncate = !!description && description.length > TRUNCATE_CHARACTER_COUNT\n  const showTruncatedDescription = shouldTruncate && isDescriptionTruncated\n  const { inputTax: sellFee, outputTax: buyFee } = useSwapTaxes(address, address)\n  const { formatPercent } = useFormatter()\n  const { sellFeeString, buyFeeString } = {\n    sellFeeString: formatPercent(sellFee),\n    buyFeeString: formatPercent(buyFee),\n  }\n  const hasFee = Boolean(parseFloat(sellFeeString)) || Boolean(parseFloat(buyFee.toFixed(2)))\n  const sameFee = sellFeeString === buyFeeString\n\n  return (\n    <TokenInfoSection data-testid=\"token-details-info-section\">\n      <InfoSectionHeader>\n        <Trans>Info</Trans>\n      </InfoSectionHeader>\n      <TokenButtonRow data-testid=\"token-details-info-links\">\n        {!currency.isNative && (\n          <Tooltip placement=\"bottom\" size={TooltipSize.Max} show={isCopied} text={t`Copied`}>\n            <TokenInfoButton onClick={copy}>\n              <Copy width=\"18px\" height=\"18px\" color={neutral2} />\n              {shortenAddress(currency.address)}\n            </TokenInfoButton>\n          </Tooltip>\n        )}\n        <ExternalLink href={explorerUrl}>\n          <TokenInfoButton>\n            <EtherscanLogo width=\"18px\" height=\"18px\" fill={neutral2} />\n            {currency.chainId === ChainId.MAINNET ? <Trans>Etherscan</Trans> : <Trans>Explorer</Trans>}\n          </TokenInfoButton>\n        </ExternalLink>\n        {homepageUrl && (\n          <ExternalLink href={homepageUrl}>\n            <TokenInfoButton>\n              <Globe width=\"18px\" height=\"18px\" fill={neutral2} />\n              <Trans>Website</Trans>\n            </TokenInfoButton>\n          </ExternalLink>\n        )}\n        {twitterName && (\n          <ExternalLink href={`https://x.com/${twitterName}`}>\n            <TokenInfoButton>\n              <TwitterXLogo width=\"18px\" height=\"18px\" fill={neutral2} />\n              <Trans>Twitter</Trans>\n            </TokenInfoButton>\n          </ExternalLink>\n        )}\n      </TokenButtonRow>\n      <TokenDescriptionContainer>\n        {!description && (\n          <NoInfoAvailable>\n            <Trans>No token information available</Trans>\n          </NoInfoAvailable>\n        )}\n        {description && (\n          <>\n            <DescriptionVisibilityWrapper data-testid=\"token-description-full\" $visible={!showTruncatedDescription}>\n              {description}\n            </DescriptionVisibilityWrapper>\n            <DescriptionVisibilityWrapper data-testid=\"token-description-truncated\" $visible={showTruncatedDescription}>\n              {truncatedDescription}\n            </DescriptionVisibilityWrapper>\n          </>\n        )}\n        {shouldTruncate && (\n          <TruncateDescriptionButton\n            onClick={toggleIsDescriptionTruncated}\n            data-testid=\"token-description-show-more-button\"\n          >\n            {isDescriptionTruncated ? <Trans>Show more</Trans> : <Trans>Hide</Trans>}\n          </TruncateDescriptionButton>\n        )}\n      </TokenDescriptionContainer>\n      {hasFee && (\n        <MouseoverTooltip\n          placement=\"left\"\n          size={TooltipSize.Small}\n          text={\n            <ThemedText.Caption color=\"neutral2\">\n              <FOTTooltipContent />\n            </ThemedText.Caption>\n          }\n        >\n          <Column gap=\"sm\">\n            {sameFee ? (\n              <ThemedText.BodyPrimary>\n                {currency.symbol}&nbsp;\n                <Trans>fee:</Trans>&nbsp;{sellFeeString}\n              </ThemedText.BodyPrimary>\n            ) : (\n              <>\n                <ThemedText.BodyPrimary>\n                  {currency.symbol}&nbsp;\n                  <Trans>buy fee:</Trans>&nbsp;{buyFeeString}\n                </ThemedText.BodyPrimary>{' '}\n                <ThemedText.BodyPrimary>\n                  {currency.symbol}&nbsp;\n                  <Trans>sell fee:</Trans>&nbsp;{sellFeeString}\n                </ThemedText.BodyPrimary>{' '}\n              </>\n            )}\n          </Column>\n        </MouseoverTooltip>\n      )}\n    </TokenInfoSection>\n  )\n}\n","import { InterfacePageName } from '@uniswap/analytics-events'\nimport { ChainId, Currency } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { Trace } from 'analytics'\nimport { BreadcrumbNavContainer, BreadcrumbNavLink, CurrentPageBreadcrumb } from 'components/BreadcrumbNav'\nimport TokenSafetyMessage from 'components/TokenSafety/TokenSafetyMessage'\nimport TokenSafetyModal from 'components/TokenSafety/TokenSafetyModal'\nimport ChartSection from 'components/Tokens/TokenDetails/ChartSection'\nimport { LeftPanel, RightPanel, TokenDetailsLayout, TokenInfoContainer } from 'components/Tokens/TokenDetails/Skeleton'\nimport StatsSection from 'components/Tokens/TokenDetails/StatsSection'\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\nimport { getTokenDetailsURL } from 'graphql/data/util'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useScreenSize } from 'hooks/screenSize'\nimport useParsedQueryString from 'hooks/useParsedQueryString'\nimport { Trans } from 'i18n'\nimport { Swap } from 'pages/Swap'\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\nimport { PropsWithChildren, useCallback, useMemo, useState } from 'react'\nimport { ChevronRight } from 'react-feather'\nimport { useNavigate } from 'react-router-dom'\nimport { CurrencyState } from 'state/swap/types'\nimport styled from 'styled-components'\nimport { addressesAreEquivalent } from 'utils/addressesAreEquivalent'\nimport { getInitialLogoUrl } from 'utils/getInitialLogoURL'\nimport { ActivitySection } from './ActivitySection'\nimport BalanceSummary from './BalanceSummary'\nimport MobileBalanceSummaryFooter from './MobileBalanceSummaryFooter'\nimport { TokenDescription } from './TokenDescription'\nimport { TokenDetailsHeader } from './TokenDetailsHeader'\nimport { Hr } from './shared'\n\nconst DividerLine = styled(Hr)`\n  margin-top: 40px;\n  margin-bottom: 40px;\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.sm}px) {\n    opacity: 0;\n    margin-bottom: 0;\n  }\n`\n\nfunction TDPBreadcrumb() {\n  const { address, currency, currencyChain } = useTDPContext()\n\n  return (\n    <BreadcrumbNavContainer aria-label=\"breadcrumb-nav\">\n      <BreadcrumbNavLink to={`/explore/${currencyChain.toLowerCase()}`}>\n        <Trans>Explore</Trans> <ChevronRight size={14} />\n      </BreadcrumbNavLink>\n      <BreadcrumbNavLink to={`/explore/tokens/${currencyChain.toLowerCase()}`}>\n        <Trans>Tokens</Trans> <ChevronRight size={14} />\n      </BreadcrumbNavLink>\n      <CurrentPageBreadcrumb address={address} currency={currency} />\n    </BreadcrumbNavContainer>\n  )\n}\n\nfunction getCurrencyURLAddress(currency?: Currency): string {\n  if (!currency) return ''\n\n  if (currency.isToken) {\n    return currency.address\n  }\n  return NATIVE_CHAIN_ID\n}\n\nfunction useSwapInitialInputCurrency() {\n  const { currency } = useTDPContext()\n  const parsedQs = useParsedQueryString()\n\n  const inputTokenAddress = useMemo(() => {\n    return typeof parsedQs.inputCurrency === 'string' ? (parsedQs.inputCurrency as string) : undefined\n  }, [parsedQs])\n\n  return useCurrency(inputTokenAddress, currency.chainId)\n}\n\nfunction TDPSwapComponent() {\n  const { address, currency, currencyChain, warning } = useTDPContext()\n  const appChainId = useWeb3React().chainId ?? ChainId.MAINNET\n  const navigate = useNavigate()\n\n  const handleCurrencyChange = useCallback(\n    (tokens: CurrencyState) => {\n      const inputCurrencyURLAddress = getCurrencyURLAddress(tokens.inputCurrency)\n      const outputCurrencyURLAddress = getCurrencyURLAddress(tokens.outputCurrency)\n      if (\n        addressesAreEquivalent(inputCurrencyURLAddress, address) ||\n        addressesAreEquivalent(outputCurrencyURLAddress, address)\n      ) {\n        return\n      }\n\n      const newDefaultToken = tokens.outputCurrency ?? tokens.inputCurrency\n\n      if (!newDefaultToken) return\n\n      const preloadedLogoSrc = getInitialLogoUrl(\n        newDefaultToken.wrapped.address,\n        newDefaultToken.chainId,\n        newDefaultToken.isNative\n      )\n      const url = getTokenDetailsURL({\n        // The function falls back to \"NATIVE\" if the address is null\n        address: newDefaultToken.isNative ? null : newDefaultToken.address,\n        chain: currencyChain,\n        inputAddress:\n          // If only one token was selected before we navigate, then it was the default token and it's being replaced.\n          // On the new page, the *new* default token becomes the output, and we don't have another option to set as the input token.\n          tokens.inputCurrency && tokens.inputCurrency !== newDefaultToken ? inputCurrencyURLAddress : null,\n      })\n      navigate(url, { state: { preloadedLogoSrc } })\n    },\n    [address, currencyChain, navigate]\n  )\n\n  // Other token to prefill the swap form with\n  const initialInputCurrency = useSwapInitialInputCurrency()\n\n  const [openTokenSafetyModal, setOpenTokenSafetyModal] = useState(false)\n  const [continueSwap, setContinueSwap] = useState<{ resolve: (value: boolean | PromiseLike<boolean>) => void }>()\n\n  const onResolveSwap = useCallback(\n    (value: boolean) => {\n      continueSwap?.resolve(value)\n      setContinueSwap(undefined)\n    },\n    [continueSwap, setContinueSwap]\n  )\n  const isBlockedToken = warning?.canProceed === false\n\n  return (\n    <>\n      <div\n        style={{ pointerEvents: isBlockedToken ? 'none' : 'auto' }}\n        onClick={() => isBlockedToken && setOpenTokenSafetyModal(true)}\n      >\n        <Swap\n          syncTabToUrl={false}\n          chainId={currency.chainId}\n          initialInputCurrency={initialInputCurrency}\n          initialOutputCurrency={currency}\n          onCurrencyChange={handleCurrencyChange}\n          disableTokenInputs={currency.chainId !== appChainId}\n          compact\n        />\n      </div>\n      {warning && <TokenSafetyMessage tokenAddress={address} warning={warning} />}\n      <TokenSafetyModal\n        isOpen={openTokenSafetyModal || !!continueSwap}\n        token0={currency.isToken ? currency : undefined}\n        onContinue={() => onResolveSwap(true)}\n        onBlocked={() => {\n          setOpenTokenSafetyModal(false)\n        }}\n        onCancel={() => onResolveSwap(false)}\n        showCancel={true}\n      />\n    </>\n  )\n}\n\nfunction TDPAnalytics({ children }: PropsWithChildren) {\n  const { address, currency } = useTDPContext()\n  return (\n    <Trace\n      page={InterfacePageName.TOKEN_DETAILS_PAGE}\n      properties={{\n        tokenAddress: address,\n        tokenSymbol: currency.symbol,\n        tokenName: currency.name,\n        chainId: currency.chainId,\n      }}\n      shouldLogImpression\n    >\n      {children}\n    </Trace>\n  )\n}\n\nexport default function TokenDetails() {\n  const { address, currency, tokenQuery } = useTDPContext()\n  const tokenQueryData = tokenQuery.data?.token\n\n  const { lg: isLargeScreenSize } = useScreenSize()\n\n  return (\n    <TDPAnalytics>\n      <TokenDetailsLayout>\n        <LeftPanel>\n          <TDPBreadcrumb />\n          <TokenInfoContainer data-testid=\"token-info-container\">\n            <TokenDetailsHeader />\n          </TokenInfoContainer>\n          <ChartSection />\n          <StatsSection chainId={currency.chainId} address={address} tokenQueryData={tokenQueryData} />\n          <DividerLine />\n          <ActivitySection />\n        </LeftPanel>\n        <RightPanel>\n          {isLargeScreenSize && (\n            <>\n              <TDPSwapComponent />\n              <BalanceSummary />\n            </>\n          )}\n          <TokenDescription />\n        </RightPanel>\n        <MobileBalanceSummaryFooter />\n      </TokenDetailsLayout>\n    </TDPAnalytics>\n  )\n}\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgEye(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.75 12C14.75 13.517 13.517 14.75 12 14.75C10.483 14.75 9.25004 13.517 9.25004 12C9.25004 11.651 9.32196 11.32 9.44096 11.012C9.63496 11.166 9.86903 11.272 10.136 11.272C10.763 11.272 11.272 10.763 11.272 10.136C11.272 9.86899 11.166 9.63492 11.012 9.44092C11.32 9.32192 11.651 9.25 12 9.25C13.517 9.25 14.75 10.483 14.75 12ZM20.5921 13.4771C19.3651 15.5311 16.609 19 12 19C7.39104 19 4.635 15.5311 3.408 13.4771C2.864 12.5671 2.864 11.4329 3.408 10.5229C4.635 8.46895 7.39104 5 12 5C16.609 5 19.3651 8.46895 20.5921 10.5229C21.1361 11.4329 21.1361 12.5671 20.5921 13.4771ZM16.25 12C16.25 9.657 14.344 7.75 12 7.75C9.65604 7.75 7.75004 9.657 7.75004 12C7.75004 14.343 9.65604 16.25 12 16.25C14.344 16.25 16.25 14.343 16.25 12Z\",\n    fill: \"currentColor\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgEye);\nexport default __webpack_public_path__ + \"static/media/eye.0b7e1ea0bf8a719e75d97cfc5cd4e72d.svg\";\nexport { ForwardRef as ReactComponent };","import { ChainId } from '@uniswap/sdk-core'\nimport { ButtonPrimary } from 'components/Button'\nimport { CHAIN_INFO, useIsSupportedChainId } from 'constants/chains'\nimport useSelectChain from 'hooks/useSelectChain'\nimport { Trans } from 'i18n'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport { useChainId } from 'wagmi'\n\nimport { ReactComponent as EyeIcon } from '../../../assets/svg/eye.svg'\n\nconst InvalidDetailsContainer = styled.div`\n  padding-top: 128px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst InvalidDetailsText = styled.span`\n  margin-top: 28px;\n  margin-bottom: 20px;\n\n  text-align: center;\n\n  color: ${({ theme }) => theme.neutral2};\n  font-size: 20px;\n  font-weight: 535;\n  line-height: 28px;\n`\n\nconst TokenExploreButton = styled(ButtonPrimary)`\n  width: fit-content;\n  padding: 12px 16px;\n  border-radius: 12px;\n\n  color: ${({ theme }) => theme.neutral1};\n  font-size: 16px;\n  font-weight: 535;\n`\n\nexport default function InvalidTokenDetails({\n  pageChainId,\n  isInvalidAddress,\n}: {\n  pageChainId: ChainId\n  isInvalidAddress?: boolean\n}) {\n  const chainId = useChainId()\n  const isSupportedChain = useIsSupportedChainId(chainId)\n  const pageChainIsSupported = useIsSupportedChainId(pageChainId)\n  const navigate = useNavigate()\n  const selectChain = useSelectChain()\n\n  // if the token's address is valid and the chains match, it's a non-existant token\n  const isNonExistentToken = !isInvalidAddress && pageChainId === chainId\n\n  const connectedChainLabel = isSupportedChain ? CHAIN_INFO[chainId].label : undefined\n\n  return (\n    <InvalidDetailsContainer>\n      <EyeIcon />\n      {isInvalidAddress || isNonExistentToken ? (\n        <>\n          <InvalidDetailsText>\n            <Trans>This token doesn&apos;t exist</Trans>\n          </InvalidDetailsText>\n          <TokenExploreButton onClick={() => navigate('/tokens')}>\n            <ThemedText.SubHeader>\n              <Trans>Explore tokens</Trans>\n            </ThemedText.SubHeader>\n          </TokenExploreButton>\n        </>\n      ) : (\n        <>\n          {connectedChainLabel && (\n            <InvalidDetailsText>\n              <Trans>This token doesn&apos;t exist on {{ connectedChainLabel }}</Trans>\n            </InvalidDetailsText>\n          )}\n          <TokenExploreButton onClick={() => selectChain(pageChainId)}>\n            <ThemedText.SubHeader>\n              <Trans>Switch to {{ label: pageChainIsSupported ? CHAIN_INFO[pageChainId].label : '' }}</Trans>\n            </ThemedText.SubHeader>\n          </TokenExploreButton>\n        </>\n      )}\n    </InvalidDetailsContainer>\n  )\n}\n","import { ChainId, Currency } from '@uniswap/sdk-core'\nimport { CHAIN_INFO, SupportedInterfaceChainId } from 'constants/chains'\nimport { t } from 'i18n'\n\nexport const getTokenPageTitle = (currency?: Currency, chainId?: SupportedInterfaceChainId) => {\n  const tokenName = currency?.name\n  const tokenSymbol = currency?.symbol\n  const baseTitle = t`Buy and sell on Uniswap`\n  if (!tokenName && !tokenSymbol) {\n    return baseTitle\n  }\n\n  const chainSuffix = chainId && chainId !== ChainId.MAINNET ? ` on ${CHAIN_INFO[chainId].label}` : ''\n  if (!tokenName && tokenSymbol) {\n    return `${tokenSymbol}${chainSuffix}: ${baseTitle}`\n  }\n  if (tokenName && !tokenSymbol) {\n    return `${tokenName}${chainSuffix}: ${baseTitle}`\n  }\n  return `${tokenName} (${tokenSymbol})${chainSuffix}: ${baseTitle}`\n}\n\nexport const getTokenPageDescription = (currency?: Currency, chainId?: SupportedInterfaceChainId) => {\n  const tokenPageName =\n    currency?.name && currency?.symbol\n      ? `${currency?.name} (${currency?.symbol})`\n      : currency?.name ?? currency?.symbol ?? 'tokens'\n  const chainSuffix = chainId && chainId !== ChainId.MAINNET ? ` on ${CHAIN_INFO[chainId].label}` : ''\n\n  return `Buy, sell, and swap ${tokenPageName}${chainSuffix}. Real-time prices, charts, transaction data, and more.`\n}\n","import { ChainId } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport TokenDetails from 'components/Tokens/TokenDetails'\nimport { useCreateTDPChartState } from 'components/Tokens/TokenDetails/ChartSection'\nimport InvalidTokenDetails from 'components/Tokens/TokenDetails/InvalidTokenDetails'\nimport { TokenDetailsPageSkeleton } from 'components/Tokens/TokenDetails/Skeleton'\nimport { useChainFromUrlParam } from 'constants/chains'\nimport { useTokenWarning } from 'constants/tokenSafety'\nimport { NATIVE_CHAIN_ID, UNKNOWN_TOKEN_SYMBOL, nativeOnChain } from 'constants/tokens'\nimport { useTokenBalancesQuery } from 'graphql/data/apollo/TokenBalancesProvider'\nimport { getSupportedGraphQlChain, gqlToCurrency } from 'graphql/data/util'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useSrcColor } from 'hooks/useColor'\nimport { useDynamicMetatags } from 'pages/metatags'\nimport { useMemo } from 'react'\nimport { Helmet } from 'react-helmet-async/lib/index'\nimport { useLocation, useParams } from 'react-router-dom'\nimport { formatTokenMetatagTitleName } from 'shared-cloud/metatags'\nimport { useTheme } from 'styled-components'\nimport { ThemeProvider } from 'theme'\nimport { useTokenWebQuery } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\nimport { isAddress } from 'utilities/src/addresses'\nimport { getNativeTokenDBAddress } from 'utils/nativeTokens'\nimport { useChainId } from 'wagmi'\nimport { LoadedTDPContext, MultiChainMap, PendingTDPContext, TDPProvider } from './TDPContext'\nimport { getTokenPageDescription, getTokenPageTitle } from './utils'\n\nfunction useOnChainToken(address: string | undefined, chainId: ChainId, skip: boolean) {\n  const token = useCurrency(!skip ? address : undefined, chainId)\n\n  if (skip || !address || (token && token?.symbol === UNKNOWN_TOKEN_SYMBOL)) {\n    return undefined\n  } else {\n    return token\n  }\n}\n\n/** Resolves a currency object from the following sources in order of preference: statically stored natives, query data, backup on-chain fetch data */\nfunction useTDPCurrency(\n  tokenQuery: ReturnType<typeof useTokenWebQuery>,\n  tokenAddress: string,\n  currencyChainId: ChainId,\n  isNative: boolean\n) {\n  const chainId = useChainId()\n  const appChainId = chainId ?? ChainId.MAINNET\n\n  const queryCurrency = useMemo(() => {\n    if (isNative) return nativeOnChain(currencyChainId)\n    if (tokenQuery.data?.token) return gqlToCurrency(tokenQuery.data.token)\n    return undefined\n  }, [isNative, currencyChainId, tokenQuery.data?.token])\n  // fetches on-chain token if query data is missing and page chain matches global chain (else fetch won't work)\n  const skipOnChainFetch = Boolean(queryCurrency) || currencyChainId !== appChainId\n  const onChainToken = useOnChainToken(tokenAddress, currencyChainId, skipOnChainFetch)\n  const currency = queryCurrency ?? onChainToken\n  const currencyWasFetchedOnChain = !queryCurrency\n\n  return { currency, currencyWasFetchedOnChain }\n}\n\n/** Returns a map to store addresses and balances of the TDP token on other chains */\nfunction useMultiChainMap(tokenQuery: ReturnType<typeof useTokenWebQuery>) {\n  // Build map to store addresses and balances of this token on other chains\n  const { data: balanceQuery } = useTokenBalancesQuery()\n  return useMemo(() => {\n    const tokenBalances = balanceQuery?.portfolios?.[0]?.tokenBalances\n    const tokensAcrossChains = tokenQuery.data?.token?.project?.tokens\n    if (!tokensAcrossChains) return {}\n    return tokensAcrossChains.reduce<MultiChainMap>((map, current) => {\n      if (current) {\n        if (!map[current.chain]) map[current.chain] = {}\n        const update = map[current.chain] ?? {}\n        update.address = current.address\n        update.balance = tokenBalances?.find((tokenBalance) => tokenBalance?.token?.id === current.id)\n        map[current.chain] = update\n      }\n      return map\n    }, {})\n  }, [balanceQuery?.portfolios, tokenQuery.data?.token?.project?.tokens])\n}\n\nfunction useCreateTDPContext(): PendingTDPContext | LoadedTDPContext {\n  const { tokenAddress } = useParams<{ tokenAddress: string }>()\n  if (!tokenAddress) throw new Error('Invalid token details route: token address URL param is undefined')\n  const currencyChainInfo = getSupportedGraphQlChain(useChainFromUrlParam(), { fallbackToEthereum: true })\n\n  const isNative = tokenAddress === NATIVE_CHAIN_ID\n\n  const tokenDBAddress = isNative ? getNativeTokenDBAddress(currencyChainInfo.backendChain.chain) : tokenAddress\n\n  const tokenQuery = useTokenWebQuery({\n    variables: { address: tokenDBAddress, chain: currencyChainInfo.backendChain.chain },\n    errorPolicy: 'all',\n  })\n  const chartState = useCreateTDPChartState(tokenDBAddress, currencyChainInfo.backendChain.chain)\n\n  const multiChainMap = useMultiChainMap(tokenQuery)\n\n  const { currency, currencyWasFetchedOnChain } = useTDPCurrency(\n    tokenQuery,\n    tokenAddress,\n    currencyChainInfo.id,\n    isNative\n  )\n\n  const warning = useTokenWarning(tokenAddress, currencyChainInfo.id)\n\n  // Extract color for page usage\n  const theme = useTheme()\n  const { preloadedLogoSrc } = (useLocation().state as { preloadedLogoSrc?: string }) ?? {}\n  const extractedColorSrc = tokenQuery.data?.token?.project?.logoUrl ?? preloadedLogoSrc\n  const tokenColor =\n    useSrcColor(extractedColorSrc, tokenQuery.data?.token?.name, theme.surface2).tokenColor ?? undefined\n\n  return useMemo(() => {\n    return {\n      currency,\n      currencyChain: currencyChainInfo.backendChain.chain,\n      currencyChainId: currencyChainInfo.id,\n      // `currency.address` is checksummed, whereas the `tokenAddress` url param may not be\n      address: (currency?.isNative ? NATIVE_CHAIN_ID : currency?.address) ?? tokenAddress,\n      currencyWasFetchedOnChain,\n      tokenQuery,\n      chartState,\n      warning,\n      multiChainMap,\n      tokenColor,\n    }\n  }, [\n    currency,\n    currencyChainInfo.backendChain.chain,\n    currencyChainInfo.id,\n    tokenAddress,\n    currencyWasFetchedOnChain,\n    tokenQuery,\n    chartState,\n    warning,\n    multiChainMap,\n    tokenColor,\n  ])\n}\n\nexport default function TokenDetailsPage() {\n  const pageChainId = useWeb3React().chainId ?? ChainId.MAINNET\n  const contextValue = useCreateTDPContext()\n  const { tokenColor, address, currency, currencyChain, currencyChainId, tokenQuery } = contextValue\n\n  const tokenQueryData = tokenQuery.data?.token\n  const metatagProperties = useMemo(() => {\n    return {\n      title: formatTokenMetatagTitleName(tokenQueryData?.symbol, tokenQueryData?.name),\n      image:\n        window.location.origin +\n        '/api/image/tokens/' +\n        currencyChain.toLowerCase() +\n        '/' +\n        (currency?.isNative ? getNativeTokenDBAddress(currencyChain) : address),\n      url: window.location.href,\n      description: getTokenPageDescription(currency, currencyChainId),\n    }\n  }, [address, currency, currencyChain, currencyChainId, tokenQueryData?.name, tokenQueryData?.symbol])\n  const metatags = useDynamicMetatags(metatagProperties)\n\n  return (\n    <ThemeProvider accent1={tokenColor ?? undefined}>\n      <Helmet>\n        <title>{getTokenPageTitle(currency, currencyChainId)}</title>\n        {metatags.map((tag, index) => (\n          <meta key={index} {...tag} />\n        ))}\n      </Helmet>\n      {(() => {\n        if (currency) {\n          return (\n            <TDPProvider contextValue={contextValue}>\n              <TokenDetails />\n            </TDPProvider>\n          )\n        }\n\n        if (tokenQuery.loading) {\n          return <TokenDetailsPageSkeleton />\n        } else {\n          return <InvalidTokenDetails pageChainId={pageChainId} isInvalidAddress={!isAddress(address)} />\n        }\n      })()}\n    </ThemeProvider>\n  )\n}\n","export type MetaTagInjectorInput = {\n  title: string\n  image?: string\n  url: string\n  description?: string\n}\n\nexport function formatTokenMetatagTitleName(symbol: string | undefined, name: string | undefined) {\n  if (symbol) {\n    return 'Get ' + symbol + ' on Uniswap'\n  }\n  if (name) {\n    return 'Get ' + name + ' on Uniswap'\n  }\n  return 'View Token on Uniswap'\n}\n\nexport function formatNFTAssetMetatagTitleName(\n  name: string | undefined,\n  collectionName: string | undefined,\n  tokenId: string\n) {\n  if (name) {\n    return name\n  }\n  if (collectionName && tokenId) {\n    return collectionName + ' #' + tokenId\n  }\n  if (tokenId) {\n    return 'Asset #' + tokenId\n  }\n  return 'View NFT on Uniswap'\n}\n","export function addressesAreEquivalent(a: string | null | undefined, b: string | null | undefined) {\n  if (!a || !b) return false\n  return a === b || a.toLowerCase() === b.toLowerCase()\n}\n"],"names":["getInitialLogoUrl","address","chainId","isNative","backupImg","networkName","isSupportedChainId","getChainInfo","assetRepoNetworkName","checksummedAddress","isAddress","isCelo","nativeOnChain","wrapped","celoLogo","undefined","DEFAULT_QUERY_SIZE","HIDDEN_COLUMNS","PoolTableColumns","Transactions","TokenDetailsPoolsTable","referenceToken","sortMethod","useAtomValue","sortMethodAtom","sortAscending","sortAscendingAtom","sortState","useMemo","sortBy","sortDirection","OrderDirection","Asc","Desc","pools","loading","errorV2","errorV3","loadMore","tokenAddress","dataV2","dataV3","v2ExploreEnabled","useFeatureFlag","FeatureFlags","V2Explore","loadingV3","error","data","fetchMore","fetchMoreV3","useTopV3PoolsQuery","variables","first","chain","chainIdToBackendChain","withFallback","loadingV2","fetchMoreV2","useTopV2PairsQuery","skip","ChainId","MAINNET","loadingMoreV3","useRef","loadingMoreV2","sizeRef","useCallback","onComplete","current","cursor","topV3Pools","length","totalLiquidity","value","updateQuery","prev","fetchMoreResult","Object","keys","mergedData","slice","topV2Pairs","map","pool","hash","token0","token1","txCount","tvl","volume24h","volumeWeek","oneDayApr","calculateOneDayApr","feeTier","protocolVersion","V2_BIPS","sortPools","usePoolsFromTokenAddress","combinedError","ApolloError","errorMessage","allDataStillLoading","useUpdateManualOutage","resetSortMethod","useResetAtom","resetSortAscending","useEffect","div","data-testid","toLowerCase","PoolsTable","maxHeight","hiddenColumns","TokenTransactionType","BUY","SELL","TokenTransactionDefaultQuerySize","StyledSwapAmount","styled","ThemedText","BodyPrimary","EllipsisStyle","TableWrapper","TransactionsTable","activeLocalCurrency","useActiveLocalCurrency","formatNumber","formatFiatPrice","useFormatter","filterModalIsOpen","toggleFilterModal","useReducer","s","filter","setFilters","useState","Swap_OrderBy","Timestamp","transactions","useV3TokenTransactionsQuery","useV2TokenTransactionsQuery","querySizeRef","token","v3Transactions","timestamp","id","Chain","Ethereum","v2Transactions","tx","tokenBeingSold","isSell","parseFloat","token0Quantity","type","PoolTransactionType","Swap","includes","sort","a","b","useTokenTransactions","unwrappedReferenceToken","unwrapToken","transaction","swapLeg0","symbol","amount","swapLeg1","token1Quantity","token0IsBeingSold","input","output","usdValue","makerAddress","account","showLoadingSkeleton","columns","columnHelper","createColumnHelper","accessor","row","header","Cell","minWidth","justifyContent","grow","Row","gap","HeaderArrow","direction","HeaderSortText","$active","Trans","cell","TimestampCell","Number","getValue","link","getExplorerLink","ExplorerDataType","TRANSACTION","FilterHeaderRow","modalOpen","onClick","Filter","allFilters","values","activeFilter","isOpen","BodySecondary","outputTokenAddress","isBuy","String","color","inputTokenAmount","Math","abs","nonReferenceSwapLeg","justify","TokenLinkCell","swapOutput","AmountUsd","fiat","price","StyledExternalLink","href","ADDRESS","shortenAddress","Table","Container","Tab","HeadlineMedium","isActive","theme","neutral1","neutral2","ClickableStyle","ActivitySection","useTDPContext","currency","activityInView","setActivityInView","ActivityTab","Txs","marginBottom","Pools","BalancesCard","BalanceSection","BalanceRow","BalanceItem","BalanceAmountsContainer","Balance","gqlBalance","currencies","formattedGqlBalance","quantity","NumberType","TokenNonTx","formattedUsdGqlValue","denominatedValue","PortfolioBalance","PortfolioLogo","images","tokenProjectMarket","tokenProject","logoUrl","size","PageChainBalanceSummary","pageChainBalance","gqlToCurrency","HeadlineSmall","OtherChainsBalanceSummary","otherChainBalances","hasPageChainBalance","navigate","useNavigate","SubHeaderSmall","balance","supportedChainIdFromGQLChain","getTokenDetailsURL","BalanceSummary","multiChainMap","useWeb3React","currencyChain","key","entries","push","hasBalances","Boolean","Wrapper","surface1","surface3","Z_INDEX","sticky","breakpoint","md","lg","BalanceValue","BalanceInfo","FiatValue","Caption","sm","SwapButton","StyledInternalLink","accent1","neutralContrast","MobileBalanceSummaryFooter","supportedChain","useSupportedChainId","to","NATIVE_CHAIN_ID","TokenInfoSection","Column","InfoSectionHeader","TokenNameRow","TokenButtonRow","TokenInfoButton","surface2","TokenDescriptionContainer","DescriptionVisibilityWrapper","p","$visible","TRUNCATE_CHARACTER_COUNT","TokenDescription","tokenQuery","useTheme","description","homepageUrl","twitterName","project","explorerUrl","NATIVE","TOKEN","isCopied","setCopied","useCopyClipboard","copy","isDescriptionTruncated","toggleIsDescriptionTruncated","x","truncatedDescription","truncateDescription","shouldTruncate","showTruncatedDescription","inputTax","sellFee","outputTax","buyFee","useSwapTaxes","formatPercent","sellFeeString","buyFeeString","hasFee","toFixed","sameFee","Tooltip","placement","TooltipSize","Max","show","text","t","Copy","width","height","ExternalLink","EtherscanLogo","fill","Globe","TwitterXLogo","NoInfoAvailable","TruncateDescriptionButton","MouseoverTooltip","Small","FOTTooltipContent","DividerLine","Hr","TDPBreadcrumb","BreadcrumbNavContainer","aria-label","BreadcrumbNavLink","ChevronRight","CurrentPageBreadcrumb","getCurrencyURLAddress","isToken","TDPSwapComponent","warning","appChainId","handleCurrencyChange","tokens","inputCurrencyURLAddress","inputCurrency","outputCurrencyURLAddress","outputCurrency","addressesAreEquivalent","newDefaultToken","preloadedLogoSrc","url","inputAddress","state","initialInputCurrency","parsedQs","useParsedQueryString","inputTokenAddress","useCurrency","useSwapInitialInputCurrency","openTokenSafetyModal","setOpenTokenSafetyModal","continueSwap","setContinueSwap","onResolveSwap","resolve","isBlockedToken","canProceed","style","pointerEvents","syncTabToUrl","initialOutputCurrency","onCurrencyChange","disableTokenInputs","compact","TokenSafetyMessage","TokenSafetyModal","onContinue","onBlocked","onCancel","showCancel","TDPAnalytics","children","Trace","page","InterfacePageName","TOKEN_DETAILS_PAGE","properties","tokenSymbol","tokenName","name","shouldLogImpression","TokenDetails","tokenQueryData","isLargeScreenSize","useScreenSize","TokenDetailsLayout","LeftPanel","TokenInfoContainer","TokenDetailsHeader","ChartSection","StatsSection","RightPanel","_path","_extends","assign","bind","target","i","arguments","source","prototype","hasOwnProperty","call","apply","this","SvgEye","_ref","svgRef","title","titleId","props","xmlns","viewBox","ref","d","ForwardRef","InvalidDetailsContainer","InvalidDetailsText","span","TokenExploreButton","ButtonPrimary","InvalidTokenDetails","pageChainId","isInvalidAddress","useChainId","isSupportedChain","useIsSupportedChainId","pageChainIsSupported","selectChain","useSelectChain","isNonExistentToken","connectedChainLabel","CHAIN_INFO","label","EyeIcon","SubHeader","getTokenPageTitle","baseTitle","chainSuffix","getTokenPageDescription","useTDPCurrency","currencyChainId","queryCurrency","skipOnChainFetch","onChainToken","UNKNOWN_TOKEN_SYMBOL","useOnChainToken","currencyWasFetchedOnChain","useCreateTDPContext","useParams","Error","currencyChainInfo","getSupportedGraphQlChain","useChainFromUrlParam","fallbackToEthereum","tokenDBAddress","getNativeTokenDBAddress","backendChain","useTokenWebQuery","errorPolicy","chartState","useCreateTDPChartState","balanceQuery","useTokenBalancesQuery","tokenBalances","portfolios","tokensAcrossChains","reduce","update","find","tokenBalance","useMultiChainMap","useTokenWarning","extractedColorSrc","tokenColor","useSrcColor","TokenDetailsPage","contextValue","metatagProperties","formatTokenMetatagTitleName","image","window","location","origin","metatags","useDynamicMetatags","ThemeProvider","Helmet","tag","index","meta","TDPProvider","TokenDetailsPageSkeleton","formatNFTAssetMetatagTitleName","collectionName","tokenId"],"sourceRoot":""}