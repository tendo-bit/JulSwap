{"version":3,"file":"static/js/6522.6db2a9de.chunk.js","mappings":"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","sources":["components/Toggle/MultiToggle.tsx","components/RateToggle/index.tsx","hooks/useV3PositionFees.ts","hooks/usePositionTokenURI.ts","pages/Pool/PositionPage.tsx"],"sourcesContent":["import styled from 'styled-components'\n\nexport const ToggleWrapper = styled.button<{ width?: string }>`\n  display: flex;\n  align-items: center;\n  width: ${({ width }) => width ?? '100%'};\n  padding: 1px;\n  background: ${({ theme }) => theme.surface2};\n  border-radius: 8px;\n  border: ${({ theme }) => '1px solid ' + theme.surface3};\n  cursor: pointer;\n  outline: none;\n`\n\nexport const ToggleElement = styled.span<{ isActive?: boolean; fontSize?: string }>`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 4px 0.5rem;\n  border-radius: 6px;\n  justify-content: center;\n  height: 100%;\n  background: ${({ theme, isActive }) => (isActive ? theme.surface1 : 'none')};\n  color: ${({ theme, isActive }) => (isActive ? theme.neutral1 : theme.neutral3)};\n  font-size: ${({ fontSize }) => fontSize ?? '1rem'};\n  font-weight: 535;\n  white-space: nowrap;\n  :hover {\n    user-select: initial;\n    color: ${({ theme, isActive }) => (isActive ? theme.neutral2 : theme.neutral3)};\n  }\n`\n","import { Currency } from '@uniswap/sdk-core'\nimport { ToggleElement, ToggleWrapper } from 'components/Toggle/MultiToggle'\n\n// the order of displayed base currencies from left to right is always in sort order\n// currencyA is treated as the preferred base currency\nexport default function RateToggle({\n  currencyA,\n  currencyB,\n  handleRateToggle,\n}: {\n  currencyA: Currency\n  currencyB: Currency\n  handleRateToggle: () => void\n}) {\n  const tokenA = currencyA?.wrapped\n  const tokenB = currencyB?.wrapped\n\n  const isSorted = tokenA && tokenB && tokenA.sortsBefore(tokenB)\n\n  return tokenA && tokenB ? (\n    <div style={{ width: 'fit-content', display: 'flex', alignItems: 'center' }} onClick={handleRateToggle}>\n      <ToggleWrapper width=\"fit-content\">\n        <ToggleElement isActive={isSorted} fontSize=\"12px\">\n          {isSorted ? currencyA.symbol : currencyB.symbol}\n        </ToggleElement>\n        <ToggleElement isActive={!isSorted} fontSize=\"12px\">\n          {isSorted ? currencyB.symbol : currencyA.symbol}\n        </ToggleElement>\n      </ToggleWrapper>\n    </div>\n  ) : null\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport useBlockNumber from 'lib/hooks/useBlockNumber'\nimport { useEffect, useState } from 'react'\nimport { unwrappedToken } from 'utils/unwrappedToken'\n\nimport { useV3NFTPositionManagerContract } from './useContract'\n\nconst MAX_UINT128 = BigNumber.from(2).pow(128).sub(1)\n\n// compute current + counterfactual fees for a v3 position\nexport function useV3PositionFees(\n  pool?: Pool,\n  tokenId?: BigNumber,\n  asWETH = false\n): [CurrencyAmount<Currency>, CurrencyAmount<Currency>] | [undefined, undefined] {\n  const positionManager = useV3NFTPositionManagerContract(false)\n  const owner: string | undefined = useSingleCallResult(tokenId ? positionManager : null, 'ownerOf', [tokenId])\n    .result?.[0]\n\n  const tokenIdHexString = tokenId?.toHexString()\n  const latestBlockNumber = useBlockNumber()\n\n  // we can't use multicall for this because we need to simulate the call from a specific address\n  // latestBlockNumber is included to ensure data stays up-to-date every block\n  const [amounts, setAmounts] = useState<[BigNumber, BigNumber] | undefined>()\n  useEffect(() => {\n    ;(async function getFees() {\n      if (positionManager && tokenIdHexString && owner) {\n        try {\n          const results = await positionManager.callStatic.collect(\n            {\n              tokenId: tokenIdHexString,\n              recipient: owner, // some tokens might fail if transferred to address(0)\n              amount0Max: MAX_UINT128,\n              amount1Max: MAX_UINT128,\n            },\n            { from: owner } // need to simulate the call as the owner\n          )\n          setAmounts([results.amount0, results.amount1])\n        } catch {\n          // If the static call fails, the default state will remain for `amounts`.\n          // This case is handled by returning unclaimed fees as empty.\n          // TODO(WEB-2283): Look into why we have failures with call data being 0x.\n        }\n      }\n    })()\n  }, [positionManager, tokenIdHexString, owner, latestBlockNumber])\n\n  if (pool && amounts) {\n    return [\n      CurrencyAmount.fromRawAmount(asWETH ? pool.token0 : unwrappedToken(pool.token0), amounts[0].toString()),\n      CurrencyAmount.fromRawAmount(asWETH ? pool.token1 : unwrappedToken(pool.token1), amounts[1].toString()),\n    ]\n  } else {\n    return [undefined, undefined]\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport JSBI from 'jsbi'\nimport { NEVER_RELOAD, useSingleCallResult } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { useV3NFTPositionManagerContract } from './useContract'\n\ntype TokenId = number | JSBI | BigNumber\n\nconst STARTS_WITH = 'data:application/json;base64,'\n\ntype UsePositionTokenURIResult =\n  | {\n      valid: true\n      loading: false\n      result: {\n        name: string\n        description: string\n        image: string\n      }\n    }\n  | {\n      valid: false\n      loading: false\n    }\n  | {\n      valid: true\n      loading: true\n    }\n\nexport function usePositionTokenURI(tokenId: TokenId | undefined): UsePositionTokenURIResult {\n  const contract = useV3NFTPositionManagerContract()\n  const inputs = useMemo(\n    () => [tokenId instanceof BigNumber ? tokenId.toHexString() : tokenId?.toString(16)],\n    [tokenId]\n  )\n  const { result, error, loading, valid } = useSingleCallResult(contract, 'tokenURI', inputs, {\n    ...NEVER_RELOAD,\n    gasRequired: 3_000_000,\n  })\n\n  return useMemo(() => {\n    if (error || !valid || !tokenId) {\n      return {\n        valid: false,\n        loading: false,\n      }\n    }\n    if (loading) {\n      return {\n        valid: true,\n        loading: true,\n      }\n    }\n    if (!result) {\n      return {\n        valid: false,\n        loading: false,\n      }\n    }\n    const [tokenURI] = result as [string]\n    if (!tokenURI || !tokenURI.startsWith(STARTS_WITH))\n      return {\n        valid: false,\n        loading: false,\n      }\n\n    try {\n      const json = JSON.parse(atob(tokenURI.slice(STARTS_WITH.length)))\n\n      return {\n        valid: true,\n        loading: false,\n        result: json,\n      }\n    } catch (error) {\n      return { valid: false, loading: false }\n    }\n  }, [error, loading, result, tokenId, valid])\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { InterfacePageName, LiquidityEventName, LiquiditySource } from '@uniswap/analytics-events'\nimport { ChainId, Currency, CurrencyAmount, Fraction, Percent, Price, Token } from '@uniswap/sdk-core'\nimport { NonfungiblePositionManager, Pool, Position } from '@uniswap/v3-sdk'\nimport { Trace, sendAnalyticsEvent } from 'analytics'\nimport Badge from 'components/Badge'\nimport { ButtonConfirmed, ButtonGray, ButtonPrimary } from 'components/Button'\nimport { DarkCard, LightCard } from 'components/Card'\nimport { AutoColumn } from 'components/Column'\nimport { LoadingFullscreen } from 'components/Loader/styled'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport { RowBetween, RowFixed } from 'components/Row'\nimport Toggle from 'components/Toggle'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from 'components/TransactionConfirmationModal'\nimport { Dots } from 'components/swap/styled'\nimport {\n  SupportedInterfaceChainId,\n  chainIdToBackendChain,\n  useIsSupportedChainId,\n  useSupportedChainId,\n} from 'constants/chains'\nimport { getPoolDetailsURL, getTokenDetailsURL, isGqlSupportedChain } from 'graphql/data/util'\nimport { useToken } from 'hooks/Tokens'\nimport { useV3NFTPositionManagerContract } from 'hooks/useContract'\nimport useIsTickAtLimit from 'hooks/useIsTickAtLimit'\nimport { PoolState, usePool } from 'hooks/usePools'\nimport useStablecoinPrice from 'hooks/useStablecoinPrice'\nimport { useV3PositionFees } from 'hooks/useV3PositionFees'\nimport { useV3PositionFromTokenId } from 'hooks/useV3Positions'\nimport { Trans, t } from 'i18n'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport { PropsWithChildren, useCallback, useMemo, useRef, useState } from 'react'\nimport { Helmet } from 'react-helmet-async/lib/index'\nimport { Link, useParams } from 'react-router-dom'\nimport { Bound } from 'state/mint/v3/actions'\nimport { useIsTransactionPending, useTransactionAdder } from 'state/transactions/hooks'\nimport styled, { useTheme } from 'styled-components'\nimport { ClickableStyle, ExternalLink, HideExtraSmall, HideSmall, StyledRouterLink, ThemedText } from 'theme/components'\nimport { currencyId } from 'utils/currencyId'\nimport { WrongChainError } from 'utils/errors'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\nimport { unwrappedToken } from 'utils/unwrappedToken'\nimport { useChainId } from 'wagmi'\n\nimport { DoubleCurrencyLogo } from 'components/DoubleLogo'\nimport { useEthersSigner } from 'hooks/useEthersSigner'\nimport { Text } from 'ui/src'\nimport { useAccount } from 'wagmi'\nimport RangeBadge from '../../components/Badge/RangeBadge'\nimport { SmallButtonPrimary } from '../../components/Button/index'\nimport { getPriceOrderingFromPositionForUI } from '../../components/PositionListItem'\nimport RateToggle from '../../components/RateToggle'\nimport { SwitchLocaleLink } from '../../components/SwitchLocaleLink'\nimport { usePositionTokenURI } from '../../hooks/usePositionTokenURI'\nimport { TransactionType } from '../../state/transactions/types'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink'\nimport { LoadingRows } from './styled'\n\nconst PositionPageButtonPrimary = styled(ButtonPrimary)`\n  width: 228px;\n  height: 40px;\n  font-size: 16px;\n  line-height: 20px;\n  border-radius: 12px;\n`\n\nconst PageWrapper = styled.div`\n  padding: 68px 16px 16px 16px;\n\n  min-width: 800px;\n  max-width: 960px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    min-width: 100%;\n    padding: 16px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    min-width: 100%;\n    padding: 16px;\n  }\n`\n\nconst BadgeText = styled.div`\n  font-weight: 535;\n  font-size: 14px;\n  color: ${({ theme }) => theme.neutral2};\n`\n\n// responsive text\n// disable the warning because we don't use the end prop, we just want to filter it out\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst Label = styled(({ end, ...props }) => <ThemedText.DeprecatedLabel {...props} />)<{ end?: boolean }>`\n  display: flex;\n  font-size: 16px;\n  justify-content: ${({ end }) => (end ? 'flex-end' : 'flex-start')};\n  align-items: center;\n`\n\nconst ExtentsText = styled.span`\n  color: ${({ theme }) => theme.neutral2};\n  font-size: 14px;\n  text-align: center;\n  margin-right: 4px;\n  font-weight: 535;\n`\n\nconst HoverText = styled(ThemedText.DeprecatedMain)`\n  text-decoration: none;\n  color: ${({ theme }) => theme.neutral2};\n  :hover {\n    color: ${({ theme }) => theme.neutral1};\n    text-decoration: none;\n  }\n`\n\nconst DoubleArrow = styled.span`\n  color: ${({ theme }) => theme.neutral3};\n  margin: 0 1rem;\n`\nconst ResponsiveRow = styled(RowBetween)`\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    flex-direction: column;\n    align-items: flex-start;\n    row-gap: 16px;\n    width: 100%;\n  }\n`\n\nconst ActionButtonResponsiveRow = styled(ResponsiveRow)`\n  width: 50%;\n  justify-content: flex-end;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    width: 100%;\n    flex-direction: row;\n    * {\n      width: 100%;\n    }\n  }\n`\n\nconst ResponsiveButtonConfirmed = styled(ButtonConfirmed)`\n  border-radius: 12px;\n  padding: 6px 8px;\n  width: fit-content;\n  font-size: 16px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    width: fit-content;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    width: fit-content;\n  }\n`\n\nconst NFTGrid = styled.div`\n  display: grid;\n  grid-template: 'overlap';\n  min-height: 400px;\n`\n\nconst NFTCanvas = styled.canvas`\n  grid-area: overlap;\n`\n\nconst NFTImage = styled.img`\n  grid-area: overlap;\n  height: 400px;\n  /* Ensures SVG appears on top of canvas. */\n  z-index: 1;\n`\n\nconst StyledPoolLink = styled(Link)`\n  text-decoration: none;\n  ${ClickableStyle}\n`\n\nconst PairHeader = styled(ThemedText.H1Medium)`\n  margin-right: 10px;\n`\n\nfunction CurrentPriceCard({\n  inverted,\n  pool,\n  currencyQuote,\n  currencyBase,\n}: {\n  inverted?: boolean\n  pool?: Pool | null\n  currencyQuote?: Currency\n  currencyBase?: Currency\n}) {\n  const { formatPrice } = useFormatter()\n\n  if (!pool || !currencyQuote || !currencyBase) {\n    return null\n  }\n\n  return (\n    <LightCard padding=\"12px\">\n      <AutoColumn gap=\"sm\" justify=\"center\">\n        <ExtentsText>\n          <Trans>Current price</Trans>\n        </ExtentsText>\n        <ThemedText.DeprecatedMediumHeader textAlign=\"center\">\n          {formatPrice({ price: inverted ? pool.token1Price : pool.token0Price, type: NumberType.TokenTx })}\n        </ThemedText.DeprecatedMediumHeader>\n        <ExtentsText>\n          <Trans>\n            {{ sym: currencyQuote?.symbol }} per {{ base: currencyBase?.symbol }}\n          </Trans>\n        </ExtentsText>\n      </AutoColumn>\n    </LightCard>\n  )\n}\n\nconst TokenLink = ({\n  children,\n  chainId,\n  address,\n}: PropsWithChildren<{ chainId: SupportedInterfaceChainId; address: string }>) => {\n  const tokenLink = getTokenDetailsURL({ address, chain: chainIdToBackendChain({ chainId }) })\n  return <StyledRouterLink to={tokenLink}>{children}</StyledRouterLink>\n}\n\nconst ExternalTokenLink = ({ children, chainId, address }: PropsWithChildren<{ chainId: number; address: string }>) => {\n  return <ExternalLink href={getExplorerLink(chainId, address, ExplorerDataType.TOKEN)}>{children}</ExternalLink>\n}\n\nfunction LinkedCurrency({ chainId, currency }: { chainId: number; currency?: Currency }) {\n  const address = (currency as Token)?.address\n  const supportedChain = useSupportedChainId(chainId)\n\n  const Link = isGqlSupportedChain(supportedChain) ? TokenLink : ExternalTokenLink\n  return (\n    <Link chainId={chainId} address={address}>\n      <RowFixed>\n        <CurrencyLogo currency={currency} size={20} style={{ marginRight: '0.5rem' }} />\n        <ThemedText.DeprecatedMain>{currency?.symbol} ↗</ThemedText.DeprecatedMain>\n      </RowFixed>\n    </Link>\n  )\n}\n\nfunction getRatio(\n  lower: Price<Currency, Currency>,\n  current: Price<Currency, Currency>,\n  upper: Price<Currency, Currency>\n) {\n  try {\n    if (!current.greaterThan(lower)) {\n      return 100\n    } else if (!current.lessThan(upper)) {\n      return 0\n    }\n\n    const a = Number.parseFloat(lower.toSignificant(15))\n    const b = Number.parseFloat(upper.toSignificant(15))\n    const c = Number.parseFloat(current.toSignificant(15))\n\n    const ratio = Math.floor((1 / ((Math.sqrt(a * b) - Math.sqrt(b * c)) / (c - Math.sqrt(b * c)) + 1)) * 100)\n\n    if (ratio < 0 || ratio > 100) {\n      throw Error('Out of range')\n    }\n\n    return ratio\n  } catch {\n    return undefined\n  }\n}\n\n// snapshots a src img into a canvas\nfunction getSnapshot(src: HTMLImageElement, canvas: HTMLCanvasElement, targetHeight: number) {\n  const context = canvas.getContext('2d')\n\n  if (context) {\n    let { width, height } = src\n\n    // src may be hidden and not have the target dimensions\n    const ratio = width / height\n    height = targetHeight\n    width = Math.round(ratio * targetHeight)\n\n    // Ensure crispness at high DPIs\n    canvas.width = width * devicePixelRatio\n    canvas.height = height * devicePixelRatio\n    canvas.style.width = width + 'px'\n    canvas.style.height = height + 'px'\n    context.scale(devicePixelRatio, devicePixelRatio)\n\n    context.clearRect(0, 0, width, height)\n    context.drawImage(src, 0, 0, width, height)\n  }\n}\n\nfunction NFT({ image, height: targetHeight }: { image: string; height: number }) {\n  const [animate, setAnimate] = useState(false)\n\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const imageRef = useRef<HTMLImageElement>(null)\n\n  return (\n    <NFTGrid\n      onMouseEnter={() => {\n        setAnimate(true)\n      }}\n      onMouseLeave={() => {\n        // snapshot the current frame so the transition to the canvas is smooth\n        if (imageRef.current && canvasRef.current) {\n          getSnapshot(imageRef.current, canvasRef.current, targetHeight)\n        }\n        setAnimate(false)\n      }}\n    >\n      <NFTCanvas ref={canvasRef} />\n      <NFTImage\n        ref={imageRef}\n        src={image}\n        hidden={!animate}\n        onLoad={() => {\n          // snapshot for the canvas\n          if (imageRef.current && canvasRef.current) {\n            getSnapshot(imageRef.current, canvasRef.current, targetHeight)\n          }\n        }}\n      />\n    </NFTGrid>\n  )\n}\n\nconst useInverter = ({\n  priceLower,\n  priceUpper,\n  quote,\n  base,\n  invert,\n}: {\n  priceLower?: Price<Token, Token>\n  priceUpper?: Price<Token, Token>\n  quote?: Token\n  base?: Token\n  invert?: boolean\n}): {\n  priceLower?: Price<Token, Token>\n  priceUpper?: Price<Token, Token>\n  quote?: Token\n  base?: Token\n} => {\n  return {\n    priceUpper: invert ? priceLower?.invert() : priceUpper,\n    priceLower: invert ? priceUpper?.invert() : priceLower,\n    quote: invert ? base : quote,\n    base: invert ? quote : base,\n  }\n}\n\nexport function PositionPageUnsupportedContent() {\n  return (\n    <PageWrapper>\n      <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n        <ThemedText.HeadlineLarge style={{ marginBottom: '8px' }}>\n          <Trans>Position unavailable</Trans>\n        </ThemedText.HeadlineLarge>\n        <ThemedText.BodyPrimary style={{ marginBottom: '32px' }}>\n          <Trans>To view a position, you must be connected to the network it belongs to.</Trans>\n        </ThemedText.BodyPrimary>\n        <PositionPageButtonPrimary as={Link} to=\"/pool\" width=\"fit-content\">\n          <Trans>Back to Pool</Trans>\n        </PositionPageButtonPrimary>\n      </div>\n    </PageWrapper>\n  )\n}\n\nexport default function PositionPage() {\n  const chainId = useChainId()\n  const isSupportedChain = useIsSupportedChainId(chainId)\n  if (isSupportedChain) {\n    return <PositionPageContent />\n  } else {\n    return <PositionPageUnsupportedContent />\n  }\n}\n\nconst PositionLabelRow = styled(RowFixed)({\n  flexWrap: 'wrap',\n  gap: 8,\n})\n\nfunction parseTokenId(tokenId: string | undefined): BigNumber | undefined {\n  if (!tokenId) return\n  try {\n    return BigNumber.from(tokenId)\n  } catch (error) {\n    return\n  }\n}\n\nfunction PositionPageContent() {\n  const { tokenId: tokenIdFromUrl } = useParams<{ tokenId?: string }>()\n  const account = useAccount()\n  const supportedChain = useSupportedChainId(account.chainId)\n  const signer = useEthersSigner()\n  const theme = useTheme()\n  const { formatCurrencyAmount, formatDelta, formatTickPrice } = useFormatter()\n\n  const parsedTokenId = parseTokenId(tokenIdFromUrl)\n  const { loading, position: positionDetails } = useV3PositionFromTokenId(parsedTokenId)\n\n  const {\n    token0: token0Address,\n    token1: token1Address,\n    fee: feeAmount,\n    liquidity,\n    tickLower,\n    tickUpper,\n    tokenId,\n  } = positionDetails || {}\n\n  const removed = liquidity?.eq(0)\n\n  const metadata = usePositionTokenURI(parsedTokenId)\n\n  const token0 = useToken(token0Address)\n  const token1 = useToken(token1Address)\n\n  const currency0 = token0 ? unwrappedToken(token0) : undefined\n  const currency1 = token1 ? unwrappedToken(token1) : undefined\n\n  // flag for receiving WETH\n  const [receiveWETH, setReceiveWETH] = useState(false)\n  const nativeCurrency = useNativeCurrency(supportedChain)\n  const nativeWrappedSymbol = nativeCurrency.wrapped.symbol\n\n  // get pool address from details returned\n  const poolAddress = token0 && token1 && feeAmount ? Pool.getAddress(token0, token1, feeAmount) : undefined\n\n  // construct Position from details returned\n  const [poolState, pool] = usePool(token0 ?? undefined, token1 ?? undefined, feeAmount)\n  const position = useMemo(() => {\n    if (pool && liquidity && typeof tickLower === 'number' && typeof tickUpper === 'number') {\n      return new Position({ pool, liquidity: liquidity.toString(), tickLower, tickUpper })\n    }\n    return undefined\n  }, [liquidity, pool, tickLower, tickUpper])\n\n  const tickAtLimit = useIsTickAtLimit(feeAmount, tickLower, tickUpper)\n\n  const pricesFromPosition = getPriceOrderingFromPositionForUI(position)\n  const [manuallyInverted, setManuallyInverted] = useState(false)\n\n  // handle manual inversion\n  const { priceLower, priceUpper, base } = useInverter({\n    priceLower: pricesFromPosition.priceLower,\n    priceUpper: pricesFromPosition.priceUpper,\n    quote: pricesFromPosition.quote,\n    base: pricesFromPosition.base,\n    invert: manuallyInverted,\n  })\n\n  const inverted = token1 ? base?.equals(token1) : undefined\n  const currencyQuote = inverted ? currency0 : currency1\n  const currencyBase = inverted ? currency1 : currency0\n\n  const ratio = useMemo(() => {\n    return priceLower && pool && priceUpper\n      ? getRatio(\n          inverted ? priceUpper.invert() : priceLower,\n          pool.token0Price,\n          inverted ? priceLower.invert() : priceUpper\n        )\n      : undefined\n  }, [inverted, pool, priceLower, priceUpper])\n\n  // fees\n  const [feeValue0, feeValue1] = useV3PositionFees(pool ?? undefined, positionDetails?.tokenId, receiveWETH)\n\n  // these currencies will match the feeValue{0,1} currencies for the purposes of fee collection\n  const currency0ForFeeCollectionPurposes = pool ? (receiveWETH ? pool.token0 : unwrappedToken(pool.token0)) : undefined\n  const currency1ForFeeCollectionPurposes = pool ? (receiveWETH ? pool.token1 : unwrappedToken(pool.token1)) : undefined\n\n  const [collecting, setCollecting] = useState<boolean>(false)\n  const [collectMigrationHash, setCollectMigrationHash] = useState<string | null>(null)\n  const isCollectPending = useIsTransactionPending(collectMigrationHash ?? undefined)\n  const [showConfirm, setShowConfirm] = useState(false)\n\n  // usdc prices always in terms of tokens\n  const price0 = useStablecoinPrice(token0 ?? undefined)\n  const price1 = useStablecoinPrice(token1 ?? undefined)\n\n  const fiatValueOfFees: CurrencyAmount<Currency> | null = useMemo(() => {\n    if (!price0 || !price1 || !feeValue0 || !feeValue1) return null\n\n    // we wrap because it doesn't matter, the quote returns a USDC amount\n    const feeValue0Wrapped = feeValue0?.wrapped\n    const feeValue1Wrapped = feeValue1?.wrapped\n\n    if (!feeValue0Wrapped || !feeValue1Wrapped) return null\n\n    const amount0 = price0.quote(feeValue0Wrapped)\n    const amount1 = price1.quote(feeValue1Wrapped)\n    return amount0.add(amount1)\n  }, [price0, price1, feeValue0, feeValue1])\n\n  const fiatValueOfLiquidity: CurrencyAmount<Token> | null = useMemo(() => {\n    if (!price0 || !price1 || !position) return null\n    const amount0 = price0.quote(position.amount0)\n    const amount1 = price1.quote(position.amount1)\n    return amount0.add(amount1)\n  }, [price0, price1, position])\n\n  const addTransaction = useTransactionAdder()\n  const positionManager = useV3NFTPositionManagerContract()\n  const collect = useCallback(async () => {\n    if (\n      !currency0ForFeeCollectionPurposes ||\n      !currency1ForFeeCollectionPurposes ||\n      account.status !== 'connected' ||\n      !positionManager ||\n      !tokenId ||\n      !signer\n    )\n      return\n\n    setCollecting(true)\n\n    // we fall back to expecting 0 fees in case the fetch fails, which is safe in the\n    // vast majority of cases\n    const { calldata, value } = NonfungiblePositionManager.collectCallParameters({\n      tokenId: tokenId.toString(),\n      expectedCurrencyOwed0: feeValue0 ?? CurrencyAmount.fromRawAmount(currency0ForFeeCollectionPurposes, 0),\n      expectedCurrencyOwed1: feeValue1 ?? CurrencyAmount.fromRawAmount(currency1ForFeeCollectionPurposes, 0),\n      recipient: account.address,\n    })\n\n    const txn = {\n      to: positionManager.address,\n      data: calldata,\n      value,\n    }\n\n    const connectedChainId = await signer.getChainId()\n    if (account.chainId !== connectedChainId) throw new WrongChainError()\n\n    signer\n      .estimateGas(txn)\n      .then((estimate) => {\n        const newTxn = {\n          ...txn,\n          gasLimit: calculateGasMargin(estimate),\n        }\n\n        return signer.sendTransaction(newTxn).then((response: TransactionResponse) => {\n          setCollectMigrationHash(response.hash)\n          setCollecting(false)\n\n          sendAnalyticsEvent(LiquidityEventName.COLLECT_LIQUIDITY_SUBMITTED, {\n            source: LiquiditySource.V3,\n            label: [currency0ForFeeCollectionPurposes.symbol, currency1ForFeeCollectionPurposes.symbol].join('/'),\n          })\n\n          addTransaction(response, {\n            type: TransactionType.COLLECT_FEES,\n            currencyId0: currencyId(currency0ForFeeCollectionPurposes),\n            currencyId1: currencyId(currency1ForFeeCollectionPurposes),\n            expectedCurrencyOwed0:\n              feeValue0?.quotient.toString() ??\n              CurrencyAmount.fromRawAmount(currency0ForFeeCollectionPurposes, 0).toExact(),\n            expectedCurrencyOwed1:\n              feeValue1?.quotient.toString() ??\n              CurrencyAmount.fromRawAmount(currency1ForFeeCollectionPurposes, 0).toExact(),\n          })\n        })\n      })\n      .catch((error) => {\n        setCollecting(false)\n        console.error(error)\n      })\n  }, [\n    currency0ForFeeCollectionPurposes,\n    currency1ForFeeCollectionPurposes,\n    account.status,\n    account.address,\n    account.chainId,\n    positionManager,\n    tokenId,\n    signer,\n    feeValue0,\n    feeValue1,\n    addTransaction,\n  ])\n\n  const owner = useSingleCallResult(tokenId ? positionManager : null, 'ownerOf', [tokenId]).result?.[0]\n  const ownsNFT = owner === account.address || positionDetails?.operator === account.address\n\n  const feeValueUpper = inverted ? feeValue0 : feeValue1\n  const feeValueLower = inverted ? feeValue1 : feeValue0\n\n  // check if price is within range\n  const below = pool && typeof tickLower === 'number' ? pool.tickCurrent < tickLower : undefined\n  const above = pool && typeof tickUpper === 'number' ? pool.tickCurrent >= tickUpper : undefined\n  const inRange: boolean = typeof below === 'boolean' && typeof above === 'boolean' ? !below && !above : false\n\n  function modalHeader() {\n    return (\n      <AutoColumn gap=\"md\" style={{ marginTop: '20px' }}>\n        <LightCard padding=\"12px 16px\">\n          <AutoColumn gap=\"md\">\n            <RowBetween>\n              <RowFixed>\n                <CurrencyLogo currency={feeValueUpper?.currency} size={20} style={{ marginRight: '0.5rem' }} />\n                <ThemedText.DeprecatedMain>\n                  {feeValueUpper ? formatCurrencyAmount({ amount: feeValueUpper }) : '-'}\n                </ThemedText.DeprecatedMain>\n              </RowFixed>\n              <ThemedText.DeprecatedMain>{feeValueUpper?.currency?.symbol}</ThemedText.DeprecatedMain>\n            </RowBetween>\n            <RowBetween>\n              <RowFixed>\n                <CurrencyLogo currency={feeValueLower?.currency} size={20} style={{ marginRight: '0.5rem' }} />\n                <ThemedText.DeprecatedMain>\n                  {feeValueLower ? formatCurrencyAmount({ amount: feeValueLower }) : '-'}\n                </ThemedText.DeprecatedMain>\n              </RowFixed>\n              <ThemedText.DeprecatedMain>{feeValueLower?.currency?.symbol}</ThemedText.DeprecatedMain>\n            </RowBetween>\n          </AutoColumn>\n        </LightCard>\n        <Text fontSize={12} fontStyle=\"italic\" color=\"$neutral2\">\n          <Trans>Collecting fees will withdraw currently available fees for you.</Trans>\n        </Text>\n        <ButtonPrimary data-testid=\"modal-collect-fees-button\" onClick={collect}>\n          <Trans>Collect</Trans>\n        </ButtonPrimary>\n      </AutoColumn>\n    )\n  }\n\n  const showCollectAsWeth = Boolean(\n    ownsNFT &&\n      (feeValue0?.greaterThan(0) || feeValue1?.greaterThan(0)) &&\n      currency0 &&\n      currency1 &&\n      (currency0.isNative || currency1.isNative) &&\n      !collectMigrationHash\n  )\n\n  if (!positionDetails && !loading) {\n    return <PositionPageUnsupportedContent />\n  }\n\n  return loading || poolState === PoolState.LOADING || !feeAmount ? (\n    <LoadingRows>\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n    </LoadingRows>\n  ) : (\n    <Trace page={InterfacePageName.POOL_PAGE} shouldLogImpression>\n      <>\n        <Helmet>\n          <title>\n            {t(`Manage {{quoteSymbol}}/{{baseSymbol}} pool liquidity on Uniswap`, {\n              quoteSymbol: currencyQuote?.symbol,\n              baseSymbol: currencyBase?.symbol,\n            })}\n          </title>\n        </Helmet>\n        <PageWrapper>\n          <TransactionConfirmationModal\n            isOpen={showConfirm}\n            onDismiss={() => setShowConfirm(false)}\n            attemptingTxn={collecting}\n            hash={collectMigrationHash ?? ''}\n            reviewContent={() => (\n              <ConfirmationModalContent\n                title={<Trans>Claim fees</Trans>}\n                onDismiss={() => setShowConfirm(false)}\n                topContent={modalHeader}\n              />\n            )}\n            pendingText={<Trans>Collecting fees</Trans>}\n          />\n          <AutoColumn gap=\"md\">\n            <AutoColumn gap=\"sm\">\n              <Link\n                data-cy=\"visit-pool\"\n                style={{ textDecoration: 'none', width: 'fit-content', marginBottom: '0.5rem' }}\n                to=\"/pool\"\n              >\n                <HoverText>\n                  <Trans>← Back to Pool</Trans>\n                </HoverText>\n              </Link>\n              <ResponsiveRow>\n                <PositionLabelRow>\n                  <DoubleCurrencyLogo currencies={[currencyBase, currencyQuote]} size={24} />\n                  <StyledPoolLink\n                    to={\n                      poolAddress\n                        ? getPoolDetailsURL(\n                            poolAddress,\n                            chainIdToBackendChain({ chainId: supportedChain, withFallback: true })\n                          )\n                        : ''\n                    }\n                  >\n                    <PairHeader>\n                      &nbsp;{currencyQuote?.symbol}&nbsp;/&nbsp;{currencyBase?.symbol}\n                    </PairHeader>\n                  </StyledPoolLink>\n                  <Badge style={{ marginRight: '8px' }}>\n                    <BadgeText>{formatDelta(parseFloat(new Percent(feeAmount, 1_000_000).toSignificant()))}</BadgeText>\n                  </Badge>\n                  <RangeBadge removed={removed} inRange={inRange} />\n                </PositionLabelRow>\n                {ownsNFT && (\n                  <ActionButtonResponsiveRow>\n                    {currency0 && currency1 && feeAmount && tokenId ? (\n                      <ButtonGray\n                        as={Link}\n                        to={`/add/${currencyId(currency0)}/${currencyId(currency1)}/${feeAmount}/${tokenId}`}\n                        padding=\"6px 8px\"\n                        width=\"fit-content\"\n                        $borderRadius=\"12px\"\n                        style={{ marginRight: '8px' }}\n                      >\n                        <Trans>Increase liquidity</Trans>\n                      </ButtonGray>\n                    ) : null}\n                    {tokenId && !removed ? (\n                      <SmallButtonPrimary\n                        as={Link}\n                        to={`/remove/${tokenId}`}\n                        padding=\"6px 8px\"\n                        width=\"fit-content\"\n                        $borderRadius=\"12px\"\n                      >\n                        <Trans>Remove liquidity</Trans>\n                      </SmallButtonPrimary>\n                    ) : null}\n                  </ActionButtonResponsiveRow>\n                )}\n              </ResponsiveRow>\n            </AutoColumn>\n            <ResponsiveRow align=\"flex-start\">\n              <HideSmall\n                style={{\n                  height: '100%',\n                  marginRight: 12,\n                }}\n              >\n                {'result' in metadata ? (\n                  <DarkCard\n                    width=\"100%\"\n                    height=\"100%\"\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      flexDirection: 'column',\n                      justifyContent: 'space-around',\n                      minWidth: '340px',\n                    }}\n                  >\n                    <NFT image={metadata.result.image} height={400} />\n                    {typeof account.chainId === 'number' && owner && !ownsNFT ? (\n                      <ExternalLink href={getExplorerLink(account.chainId, owner, ExplorerDataType.ADDRESS)}>\n                        <Trans>Owner</Trans>\n                      </ExternalLink>\n                    ) : null}\n                  </DarkCard>\n                ) : (\n                  <DarkCard\n                    width=\"100%\"\n                    height=\"100%\"\n                    style={{\n                      minWidth: '340px',\n                      position: 'relative',\n                      overflow: 'hidden',\n                    }}\n                  >\n                    <LoadingFullscreen />\n                  </DarkCard>\n                )}\n              </HideSmall>\n              <AutoColumn gap=\"sm\" style={{ width: '100%', height: '100%' }}>\n                <DarkCard>\n                  <AutoColumn gap=\"md\" style={{ width: '100%' }}>\n                    <AutoColumn gap=\"md\">\n                      <Label>\n                        <Trans>Liquidity</Trans>\n                      </Label>\n                      {fiatValueOfLiquidity?.greaterThan(new Fraction(1, 100)) ? (\n                        <ThemedText.DeprecatedLargeHeader fontSize=\"36px\" fontWeight={535}>\n                          {formatCurrencyAmount({\n                            amount: fiatValueOfLiquidity,\n                            type: NumberType.FiatTokenPrice,\n                          })}\n                        </ThemedText.DeprecatedLargeHeader>\n                      ) : (\n                        <ThemedText.DeprecatedLargeHeader color={theme.neutral1} fontSize=\"36px\" fontWeight={535}>\n                          <Trans>-</Trans>\n                        </ThemedText.DeprecatedLargeHeader>\n                      )}\n                    </AutoColumn>\n                    <LightCard padding=\"12px 16px\">\n                      <AutoColumn gap=\"md\">\n                        <RowBetween>\n                          <LinkedCurrency chainId={account.chainId ?? ChainId.MAINNET} currency={currencyQuote} />\n                          <RowFixed>\n                            <ThemedText.DeprecatedMain>\n                              {formatCurrencyAmount({ amount: inverted ? position?.amount0 : position?.amount1 })}\n                            </ThemedText.DeprecatedMain>\n                            {typeof ratio === 'number' && !removed ? (\n                              <Badge style={{ marginLeft: '10px' }}>\n                                <BadgeText>\n                                  <Trans>{{ pct: inverted ? ratio : 100 - ratio }}%</Trans>\n                                </BadgeText>\n                              </Badge>\n                            ) : null}\n                          </RowFixed>\n                        </RowBetween>\n                        <RowBetween>\n                          <LinkedCurrency chainId={account.chainId ?? ChainId.MAINNET} currency={currencyBase} />\n                          <RowFixed>\n                            <ThemedText.DeprecatedMain>\n                              {formatCurrencyAmount({ amount: inverted ? position?.amount1 : position?.amount0 })}\n                            </ThemedText.DeprecatedMain>\n                            {typeof ratio === 'number' && !removed ? (\n                              <Badge style={{ marginLeft: '10px' }}>\n                                <BadgeText>\n                                  <Trans>{{ pct: inverted ? 100 - ratio : ratio }}%</Trans>\n                                </BadgeText>\n                              </Badge>\n                            ) : null}\n                          </RowFixed>\n                        </RowBetween>\n                      </AutoColumn>\n                    </LightCard>\n                  </AutoColumn>\n                </DarkCard>\n                <DarkCard>\n                  <AutoColumn gap=\"md\" style={{ width: '100%' }}>\n                    <AutoColumn gap=\"md\">\n                      <RowBetween style={{ alignItems: 'flex-start' }}>\n                        <AutoColumn gap=\"md\">\n                          <Label>\n                            <Trans>Unclaimed fees</Trans>\n                          </Label>\n                          {fiatValueOfFees?.greaterThan(new Fraction(1, 100)) ? (\n                            <ThemedText.DeprecatedLargeHeader color={theme.success} fontSize=\"36px\" fontWeight={535}>\n                              {formatCurrencyAmount({ amount: fiatValueOfFees, type: NumberType.FiatTokenPrice })}\n                            </ThemedText.DeprecatedLargeHeader>\n                          ) : (\n                            <ThemedText.DeprecatedLargeHeader color={theme.neutral1} fontSize=\"36px\" fontWeight={535}>\n                              -\n                            </ThemedText.DeprecatedLargeHeader>\n                          )}\n                        </AutoColumn>\n                        {ownsNFT &&\n                        (feeValue0?.greaterThan(0) || feeValue1?.greaterThan(0) || !!collectMigrationHash) ? (\n                          <ResponsiveButtonConfirmed\n                            data-testid=\"collect-fees-button\"\n                            disabled={collecting || !!collectMigrationHash}\n                            confirmed={!!collectMigrationHash && !isCollectPending}\n                            width=\"fit-content\"\n                            style={{ borderRadius: '12px' }}\n                            padding=\"4px 8px\"\n                            onClick={() => setShowConfirm(true)}\n                          >\n                            {!!collectMigrationHash && !isCollectPending ? (\n                              <ThemedText.DeprecatedMain color={theme.neutral1}>\n                                <Trans> Collected</Trans>\n                              </ThemedText.DeprecatedMain>\n                            ) : isCollectPending || collecting ? (\n                              <ThemedText.DeprecatedMain color={theme.neutral1}>\n                                {' '}\n                                <Dots>\n                                  <Trans>Collecting</Trans>\n                                </Dots>\n                              </ThemedText.DeprecatedMain>\n                            ) : (\n                              <>\n                                <ThemedText.DeprecatedMain color={theme.white}>\n                                  <Trans>Collect fees</Trans>\n                                </ThemedText.DeprecatedMain>\n                              </>\n                            )}\n                          </ResponsiveButtonConfirmed>\n                        ) : null}\n                      </RowBetween>\n                    </AutoColumn>\n                    <LightCard padding=\"12px 16px\">\n                      <AutoColumn gap=\"md\">\n                        <RowBetween>\n                          <RowFixed>\n                            <CurrencyLogo\n                              currency={feeValueUpper?.currency}\n                              size={20}\n                              style={{ marginRight: '0.5rem' }}\n                            />\n                            <ThemedText.DeprecatedMain>{feeValueUpper?.currency?.symbol}</ThemedText.DeprecatedMain>\n                          </RowFixed>\n                          <RowFixed>\n                            <ThemedText.DeprecatedMain>\n                              {feeValueUpper ? formatCurrencyAmount({ amount: feeValueUpper }) : '-'}\n                            </ThemedText.DeprecatedMain>\n                          </RowFixed>\n                        </RowBetween>\n                        <RowBetween>\n                          <RowFixed>\n                            <CurrencyLogo\n                              currency={feeValueLower?.currency}\n                              size={20}\n                              style={{ marginRight: '0.5rem' }}\n                            />\n                            <ThemedText.DeprecatedMain>{feeValueLower?.currency?.symbol}</ThemedText.DeprecatedMain>\n                          </RowFixed>\n                          <RowFixed>\n                            <ThemedText.DeprecatedMain>\n                              {feeValueLower ? formatCurrencyAmount({ amount: feeValueLower }) : '-'}\n                            </ThemedText.DeprecatedMain>\n                          </RowFixed>\n                        </RowBetween>\n                      </AutoColumn>\n                    </LightCard>\n                    {showCollectAsWeth && (\n                      <AutoColumn gap=\"md\">\n                        <RowBetween>\n                          <ThemedText.DeprecatedMain>\n                            <Trans>Collect as {{ nativeWrappedSymbol }}</Trans>\n                          </ThemedText.DeprecatedMain>\n                          <Toggle\n                            id=\"receive-as-weth\"\n                            isActive={receiveWETH}\n                            toggle={() => setReceiveWETH((receiveWETH) => !receiveWETH)}\n                          />\n                        </RowBetween>\n                      </AutoColumn>\n                    )}\n                  </AutoColumn>\n                </DarkCard>\n              </AutoColumn>\n            </ResponsiveRow>\n            <DarkCard>\n              <AutoColumn gap=\"md\">\n                <RowBetween>\n                  <RowFixed>\n                    <Label display=\"flex\" style={{ marginRight: '12px' }}>\n                      <Trans>Price range</Trans>\n                    </Label>\n                    <HideExtraSmall>\n                      <>\n                        <RangeBadge removed={removed} inRange={inRange} />\n                        <span style={{ width: '8px' }} />\n                      </>\n                    </HideExtraSmall>\n                  </RowFixed>\n                  <RowFixed>\n                    {currencyBase && currencyQuote && (\n                      <RateToggle\n                        currencyA={currencyBase}\n                        currencyB={currencyQuote}\n                        handleRateToggle={() => setManuallyInverted(!manuallyInverted)}\n                      />\n                    )}\n                  </RowFixed>\n                </RowBetween>\n\n                <RowBetween>\n                  <LightCard padding=\"12px\" width=\"100%\">\n                    <AutoColumn gap=\"sm\" justify=\"center\">\n                      <ExtentsText>\n                        <Trans>Min price</Trans>\n                      </ExtentsText>\n                      <ThemedText.DeprecatedMediumHeader textAlign=\"center\">\n                        {formatTickPrice({\n                          price: priceLower,\n                          atLimit: tickAtLimit,\n                          direction: Bound.LOWER,\n                          numberType: NumberType.TokenTx,\n                        })}\n                      </ThemedText.DeprecatedMediumHeader>\n                      <ExtentsText>\n                        {' '}\n                        <Trans>\n                          {{ symbol: currencyQuote?.symbol }} per {{ base: currencyBase?.symbol }}\n                        </Trans>\n                      </ExtentsText>\n\n                      {inRange && (\n                        <Text fontSize={11} color=\"$neutral3\">\n                          <Trans>Your position will be 100% {{ symbol: currencyBase?.symbol }} at this price.</Trans>\n                        </Text>\n                      )}\n                    </AutoColumn>\n                  </LightCard>\n\n                  <DoubleArrow>⟷</DoubleArrow>\n                  <LightCard padding=\"12px\" width=\"100%\">\n                    <AutoColumn gap=\"sm\" justify=\"center\">\n                      <ExtentsText>\n                        <Trans>Max price</Trans>\n                      </ExtentsText>\n                      <ThemedText.DeprecatedMediumHeader textAlign=\"center\">\n                        {formatTickPrice({\n                          price: priceUpper,\n                          atLimit: tickAtLimit,\n                          direction: Bound.UPPER,\n                          numberType: NumberType.TokenTx,\n                        })}\n                      </ThemedText.DeprecatedMediumHeader>\n                      <ExtentsText>\n                        {' '}\n                        <Trans>\n                          {{ symbol: currencyQuote?.symbol }} per {{ base: currencyBase?.symbol }}\n                        </Trans>\n                      </ExtentsText>\n\n                      {inRange && (\n                        <Text fontSize={11} color=\"$neutral3\">\n                          <Trans>Your position will be 100% {{ symbol: currencyQuote?.symbol }} at this price.</Trans>\n                        </Text>\n                      )}\n                    </AutoColumn>\n                  </LightCard>\n                </RowBetween>\n                <CurrentPriceCard\n                  inverted={inverted}\n                  pool={pool}\n                  currencyQuote={currencyQuote}\n                  currencyBase={currencyBase}\n                />\n              </AutoColumn>\n            </DarkCard>\n          </AutoColumn>\n        </PageWrapper>\n        <SwitchLocaleLink />\n      </>\n    </Trace>\n  )\n}\n"],"names":["ToggleWrapper","styled","button","width","theme","surface2","surface3","ToggleElement","span","isActive","surface1","neutral1","neutral3","fontSize","neutral2","RateToggle","currencyA","currencyB","handleRateToggle","tokenA","wrapped","tokenB","isSorted","sortsBefore","div","style","display","alignItems","onClick","symbol","MAX_UINT128","BigNumber","from","pow","sub","useV3PositionFees","pool","tokenId","asWETH","useSingleCallResult","positionManager","useV3NFTPositionManagerContract","owner","result","tokenIdHexString","toHexString","latestBlockNumber","useBlockNumber","amounts","setAmounts","useState","useEffect","getFees","results","callStatic","collect","recipient","amount0Max","amount1Max","amount0","amount1","CurrencyAmount","fromRawAmount","token0","unwrappedToken","toString","token1","undefined","STARTS_WITH","PositionPageButtonPrimary","ButtonPrimary","PageWrapper","breakpoint","md","sm","BadgeText","Label","end","props","ThemedText","DeprecatedLabel","ExtentsText","HoverText","DeprecatedMain","DoubleArrow","ResponsiveRow","RowBetween","ActionButtonResponsiveRow","ResponsiveButtonConfirmed","ButtonConfirmed","NFTGrid","NFTCanvas","canvas","NFTImage","img","StyledPoolLink","Link","ClickableStyle","PairHeader","H1Medium","CurrentPriceCard","inverted","currencyQuote","currencyBase","formatPrice","useFormatter","LightCard","padding","AutoColumn","gap","justify","Trans","DeprecatedMediumHeader","textAlign","price","token1Price","token0Price","type","NumberType","TokenTx","sym","base","TokenLink","children","chainId","address","tokenLink","getTokenDetailsURL","chain","chainIdToBackendChain","StyledRouterLink","to","ExternalTokenLink","ExternalLink","href","getExplorerLink","ExplorerDataType","TOKEN","LinkedCurrency","currency","supportedChain","useSupportedChainId","isGqlSupportedChain","RowFixed","CurrencyLogo","size","marginRight","getSnapshot","src","targetHeight","context","getContext","height","ratio","Math","round","devicePixelRatio","scale","clearRect","drawImage","NFT","image","animate","setAnimate","canvasRef","useRef","imageRef","onMouseEnter","onMouseLeave","current","ref","hidden","onLoad","useInverter","priceLower","priceUpper","quote","invert","PositionPageUnsupportedContent","flexDirection","HeadlineLarge","marginBottom","BodyPrimary","as","PositionPage","useChainId","useIsSupportedChainId","PositionPageContent","PositionLabelRow","flexWrap","liquidity","positionDetails","feeValue0","feeValue1","fiatValueOfLiquidity","position","fiatValueOfFees","feeValueUpper","feeValueLower","tokenIdFromUrl","useParams","account","useAccount","signer","useEthersSigner","useTheme","formatCurrencyAmount","formatDelta","formatTickPrice","parsedTokenId","error","parseTokenId","loading","useV3PositionFromTokenId","token0Address","token1Address","fee","feeAmount","tickLower","tickUpper","removed","eq","metadata","contract","inputs","useMemo","valid","NEVER_RELOAD","gasRequired","tokenURI","startsWith","JSON","parse","atob","slice","length","usePositionTokenURI","useToken","currency0","currency1","receiveWETH","setReceiveWETH","nativeWrappedSymbol","useNativeCurrency","poolAddress","Pool","getAddress","poolState","usePool","Position","tickAtLimit","useIsTickAtLimit","pricesFromPosition","getPriceOrderingFromPositionForUI","manuallyInverted","setManuallyInverted","equals","lower","upper","greaterThan","lessThan","a","Number","parseFloat","toSignificant","b","c","floor","sqrt","Error","getRatio","currency0ForFeeCollectionPurposes","currency1ForFeeCollectionPurposes","collecting","setCollecting","collectMigrationHash","setCollectMigrationHash","isCollectPending","useIsTransactionPending","showConfirm","setShowConfirm","price0","useStablecoinPrice","price1","feeValue0Wrapped","feeValue1Wrapped","add","addTransaction","useTransactionAdder","useCallback","status","calldata","value","NonfungiblePositionManager","collectCallParameters","expectedCurrencyOwed0","expectedCurrencyOwed1","txn","data","connectedChainId","getChainId","WrongChainError","estimateGas","then","estimate","newTxn","gasLimit","calculateGasMargin","sendTransaction","response","hash","sendAnalyticsEvent","LiquidityEventName","COLLECT_LIQUIDITY_SUBMITTED","source","LiquiditySource","V3","label","join","TransactionType","COLLECT_FEES","currencyId0","currencyId","currencyId1","quotient","toExact","catch","console","ownsNFT","operator","below","tickCurrent","above","inRange","modalHeader","marginTop","amount","Text","fontStyle","color","data-testid","showCollectAsWeth","Boolean","isNative","PoolState","LOADING","LoadingRows","Trace","page","InterfacePageName","POOL_PAGE","shouldLogImpression","Helmet","title","t","quoteSymbol","baseSymbol","TransactionConfirmationModal","isOpen","onDismiss","attemptingTxn","reviewContent","ConfirmationModalContent","topContent","pendingText","data-cy","textDecoration","DoubleCurrencyLogo","currencies","getPoolDetailsURL","withFallback","Badge","Percent","RangeBadge","ButtonGray","$borderRadius","SmallButtonPrimary","align","HideSmall","DarkCard","justifyContent","minWidth","ADDRESS","overflow","LoadingFullscreen","Fraction","DeprecatedLargeHeader","fontWeight","FiatTokenPrice","ChainId","MAINNET","marginLeft","pct","success","disabled","confirmed","borderRadius","Dots","white","Toggle","id","toggle","HideExtraSmall","atLimit","direction","Bound","LOWER","numberType","UPPER","SwitchLocaleLink"],"sourceRoot":""}